<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NoodlePapa</title>
  <subtitle>life likes lighting night</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gaoll.top/"/>
  <updated>2017-08-27T14:13:56.000Z</updated>
  <id>http://gaoll.top/</id>
  
  <author>
    <name>NoodlePapa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>写在七夕前夕</title>
    <link href="http://gaoll.top/2017/08/27/%E5%86%99%E5%9C%A8%E4%B8%83%E5%A4%95%E5%89%8D%E5%A4%95/"/>
    <id>http://gaoll.top/2017/08/27/写在七夕前夕/</id>
    <published>2017-08-27T13:04:00.000Z</published>
    <updated>2017-08-27T14:13:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>2017，超速的一年，虽然仅仅过去了一半有余</p>
<p>千头万绪，不知从何说起，就像一直以来的处境，茫目焦虑。流水账的给自己梳理记录下。</p>
<a id="more"></a>
<h1 id="感情"><a href="#感情" class="headerlink" title="感情"></a>感情</h1><p>年前初识的甜蜜浓浓，春节期间的相思义无反顾，年后的热恋疯狂。就像小说，冲动的年纪，必然有冥冥中的结果。两个人生活的结合、即将演变成的三人世界，虽猝不及防，却也不失是一种别样的成长与责任。</p>
<p>那个轻浮的毛头小子，你够努力了么</p>
<h1 id="家庭"><a href="#家庭" class="headerlink" title="家庭"></a>家庭</h1><p>像吃经验书升级般的感情经历。带来最直接的变化莫过于对家庭的影响。这些日子，丈母娘在身边照顾老婆，老丈人也因为身体抱恙被小舅子陪着来到北京看病。</p>
<p>北京的租住处，竟然莫名有了浓浓的家味。茶前饭后，看着老婆一家逗逗乐拌拌嘴，就总在想千里之外的老头老娘。<code>你工作忙，所以我都不敢但电话给你，就怕打扰你。</code>,<code>恩，你有空就给我打电话，我在家又没什么事。主要就是看你们可由什么需要</code>。想想以前单身狗时，工作结束、游戏期间，还会想着给老头老年敲个电话吧，现在竟惊恐的发现一天，可以毫无察觉的度过，没有社交、没有家人的嘘寒问暖。深深的内疚。</p>
<p>那个老头老娘挂念的儿子，你要继续学习感恩</p>
<h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>人的精力有限。17年上半年的林林总总，机关枪般的扫射下，精力从一个个单孔里飞速流逝。不得不承认，在工作上，以往同事眼中敬职敬责的木豆，已经开始变味了。</p>
<p>这是个很不乐观的局面。鑫哥有句话很入我心：<code>工作也好，做人也罢。口碑这个东西，特别重要。而且好口碑难塑，破坏起来，太容易了。</code>我明白我现在的处境实际上已经快要把口碑改造成墓碑了。</p>
<p>那个兢兢业业的木豆，我姑且保留对你的口碑，不要让大家失望</p>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>这半年来，工作上的负面影响，也带入到了平时的学习充电中。这块没有任何借口，计划好的书本，啃了多少。想学的知识，实际开始学习了的又有多少。</p>
<p>同时，工作领域的危机感，也越来越强。鑫哥已经用他的实际行动告诉我们，必须保持高速学习、必须明确区分主次。</p>
<p>学习、提升，没有捷径。如果有，那唯一的方法就是迎风向前</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>主题七夕，结束了二十多年的单身狗的生活。第一个七夕情人节。希望能给我爱的人，一个难忘的记忆。</p>
<hr>
<h1 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h1><p>最近发现，书必须得读。不能再拖延了<br>发现个很好的个人博客：<a href="http://wdxtub.com/" target="_blank" rel="external">小土刀</a>，羡慕博主的各种方法论、世界观。希望能借鉴并提升自己。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017，超速的一年，虽然仅仅过去了一半有余&lt;/p&gt;
&lt;p&gt;千头万绪，不知从何说起，就像一直以来的处境，茫目焦虑。流水账的给自己梳理记录下。&lt;/p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://gaoll.top/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>黑马程序-银行客户调度系统</title>
    <link href="http://gaoll.top/2014/01/13/%E9%93%B6%E8%A1%8C%E5%AE%A2%E6%88%B7%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://gaoll.top/2014/01/13/银行客户调度系统/</id>
    <published>2014-01-12T18:02:00.000Z</published>
    <updated>2017-08-24T07:58:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事物抽象化分析"><a href="#事物抽象化分析" class="headerlink" title="事物抽象化分析:"></a><strong>事物抽象化分析:</strong></h2><p><strong>项目需求:</strong></p>
<p>用代码演示一个建议的银行业务调度系统,(其实就是叫号系统.)<br><strong>思路分析:<br>从名词下手,分析可能需要定义的类:</strong><br>客户:普通客户,快速客户,VIP客户.<br>窗口:普通窗口,快速窗口,VIP窗口.<br>用户编号:普通编号,快速编号,VIP编号(一个编号对应一个客户)<br><strong>再从行为上下手,具体分析:</strong><br>客户和编号关联,所以用产生一个编号,对应一个客户.——&gt;编号产生类.<br>客户类型不同,所以需要上述不同的三个编号产生类.同时要对他们进行调度—–&gt;编号管理类.<br>服务窗口,对应不同的服务类型,存在三种窗口类型,但每种类型有不同.<br>所以将窗口抽取,类型定义枚举.——&gt;窗口类型枚举,窗口类.<br>下面是跟着老师的步骤一步步来的代码.状态不好,勉强跟上老师思路.还是有很多模糊的地方.想放代码.慢慢消化</p>
<a id="more"></a>
<h3 id="服务编号产生类"><a href="#服务编号产生类" class="headerlink" title="服务编号产生类"></a><strong>服务编号产生类</strong></h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//定义某个服务编号产生类.</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//定义某服务类型下一个号.</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> nextCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> List <span class="token operator">&lt;</span>Integer<span class="token operator">></span> listsCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//定义取号方法.返回及其中的下一个号.</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> Integer <span class="token function">createNewCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        listCode<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token operator">++</span>nextCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> nextCode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义分配号方法</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> Integer <span class="token function">fetchCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>listsCode<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">(</span>listsCode<span class="token punctuation">.</span><span class="token function">removeFist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h3 id="编号操作类"><a href="#编号操作类" class="headerlink" title="编号操作类"></a><strong>编号操作类</strong></h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//定义编号操作机,对应不同服务类型产生同一个的操作机,否则无法同步.(操作包括取号,分配号)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeMachine</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//设置单例.毕竟应该只有一个</span>
    <span class="token keyword">private</span> <span class="token function">CodeMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> CodeMachine single <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> CodeMachine <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> single<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义不同服务类型编号的成员属性.代表该机器中可操作的编号类型那个.并定义获取方法.</span>
    <span class="token keyword">private</span> Code commonCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Code expressCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Code vipCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> Code <span class="token function">getCommonCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> commonCode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> Code <span class="token function">getExpressCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> expressCode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> Code <span class="token function">getVipCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> vipCode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="服务类型的枚举"><a href="#服务类型的枚举" class="headerlink" title="服务类型的枚举"></a><strong>服务类型的枚举</strong></h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//定义枚举类服务类型</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> CustomerType <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//为了让窗口类只有一个,不同窗口实例对象是通过从枚举中获得某一特定服务类型.</span>
    COMMON<span class="token punctuation">,</span>EXPRESS<span class="token punctuation">,</span>VIP<span class="token punctuation">;</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        String name <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//这里,switch可以用String是从JDK5以后来的新特性.正好方便编程. </span>
        <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> COMMON<span class="token operator">:</span>
            name <span class="token operator">=</span> <span class="token string">"普通"</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> EXPRESS<span class="token operator">:</span>
            name <span class="token operator">=</span> <span class="token string">"快速"</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> VIP<span class="token operator">:</span>
            name <span class="token operator">=</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="服务窗口类"><a href="#服务窗口类" class="headerlink" title="服务窗口类"></a>服务窗口类</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//定义服务窗口类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceWindow</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//从定义了的枚举类中,获取服务类型.</span>
    <span class="token keyword">private</span> CustomerType type <span class="token operator">=</span> CustomerType<span class="token punctuation">.</span>COMMON<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//定义窗口编号.及其设置方法</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义设置,获取服务类型的方法</span>
    <span class="token keyword">public</span> CustomerType <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span>CustomerType type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//用单线程池来让某个服务类型的窗口,调用该类型服务的方法.</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token keyword">switch</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>
                            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                                <span class="token comment" spellcheck="true">//调用对应类型的服务方法.</span>
                                <span class="token keyword">case</span> COMMON<span class="token operator">:</span>
                                    <span class="token function">commonService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                                <span class="token keyword">case</span> EXPRESS<span class="token operator">:</span>
                                    <span class="token function">expressService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                                <span class="token keyword">case</span> VIP<span class="token operator">:</span>
                                    <span class="token function">vipService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义不同类型服务方法.</span>
    <span class="token comment" spellcheck="true">//定义普通服务</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">commonService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        String windowName <span class="token operator">=</span> <span class="token string">"第"</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">"号"</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">"窗口"</span><span class="token punctuation">;</span>        
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>windowName <span class="token operator">+</span> <span class="token string">"开始等待普通服务客户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Integer serviceNumber <span class="token operator">=</span> CodeMachine<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCommonCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetchCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
        <span class="token keyword">if</span><span class="token punctuation">(</span>serviceNumber <span class="token operator">!=</span> null <span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>windowName <span class="token operator">+</span> <span class="token string">"开始为"</span> <span class="token operator">+</span> serviceNumber <span class="token operator">+</span> <span class="token string">"号普通客户服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
            <span class="token keyword">int</span> maxRandom <span class="token operator">=</span> Constants<span class="token punctuation">.</span>MAX_SERVICE_TIME <span class="token operator">-</span> Constants<span class="token punctuation">.</span>MIN_SERVICE_TIME<span class="token punctuation">;</span>
            <span class="token keyword">int</span> serviceTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>maxRandom<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">+</span> Constants<span class="token punctuation">.</span>MIN_SERVICE_TIME<span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>serviceTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>    
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>windowName <span class="token operator">+</span> <span class="token string">"完成为"</span> <span class="token operator">+</span> serviceNumber <span class="token operator">+</span> <span class="token string">"号普通客户服务，耗时"</span> <span class="token operator">+</span> serviceTime<span class="token operator">/</span><span class="token number">1000</span> <span class="token operator">+</span> <span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>windowName <span class="token operator">+</span> <span class="token string">"无普通服务等待客户，休整一秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>                
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义快速服务</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">expressService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Integer serviceNumber <span class="token operator">=</span> CodeMachine<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpressCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetchCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String windowName <span class="token operator">=</span> <span class="token string">"第"</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">"号"</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">"窗口"</span><span class="token punctuation">;</span>    
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>windowName <span class="token operator">+</span> <span class="token string">"开始等待快速服务客户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
        <span class="token keyword">if</span><span class="token punctuation">(</span>serviceNumber <span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>windowName <span class="token operator">+</span> <span class="token string">"开始为"</span> <span class="token operator">+</span> serviceNumber <span class="token operator">+</span> <span class="token string">"号快速客户服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
            <span class="token keyword">int</span> serviceTime <span class="token operator">=</span> Constants<span class="token punctuation">.</span>MIN_SERVICE_TIME<span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>serviceTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>        
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>windowName <span class="token operator">+</span> <span class="token string">"完成"</span> <span class="token operator">+</span> serviceNumber <span class="token operator">+</span> <span class="token string">"号快速客户服务，耗时"</span> <span class="token operator">+</span> serviceTime<span class="token operator">/</span><span class="token number">1000</span> <span class="token operator">+</span> <span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>windowName <span class="token operator">+</span> <span class="token string">"无快速服务等待客户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                
            <span class="token function">commonService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义VIP服务</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">vipService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Integer serviceNumber <span class="token operator">=</span> CodeMachine<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVipCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetchCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String windowName <span class="token operator">=</span> <span class="token string">"第"</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">"号"</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">"窗口"</span><span class="token punctuation">;</span>    
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>windowName <span class="token operator">+</span> <span class="token string">"开始等待VIP服务客户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
        <span class="token keyword">if</span><span class="token punctuation">(</span>serviceNumber <span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>windowName <span class="token operator">+</span> <span class="token string">"开始为"</span> <span class="token operator">+</span> serviceNumber <span class="token operator">+</span> <span class="token string">"号VIP客户服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
            <span class="token keyword">int</span> maxRandom <span class="token operator">=</span> Constants<span class="token punctuation">.</span>MAX_SERVICE_TIME <span class="token operator">-</span> Constants<span class="token punctuation">.</span>MIN_SERVICE_TIME<span class="token punctuation">;</span>
            <span class="token keyword">int</span> serviceTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>maxRandom<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">+</span> Constants<span class="token punctuation">.</span>MIN_SERVICE_TIME<span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>serviceTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>        
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>windowName <span class="token operator">+</span> <span class="token string">"完成"</span> <span class="token operator">+</span> serviceNumber <span class="token operator">+</span> <span class="token string">"号VIP客户服务，耗时"</span> <span class="token operator">+</span> serviceTime<span class="token operator">/</span><span class="token number">1000</span> <span class="token operator">+</span> <span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>windowName <span class="token operator">+</span> <span class="token string">"无VIP服务等待客户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                
            <span class="token function">commonService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a><strong>测试类</strong></h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//定义测试类,生成一定数目窗口,一定数目顾客,执行服务.</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//开放普通窗口并进行实例化</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            ServiceWindow window <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ServiceWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            window<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            window<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">//开放快速窗口</span>
        <span class="token comment" spellcheck="true">//窗口实例化时,通过调用setType()方法确定了服务类型</span>
        ServiceWindow expressWindow <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ServiceWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        expressWindow<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>CustomerType<span class="token punctuation">.</span>EXPRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        expressWindow<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//开放VIP窗口        </span>
        ServiceWindow vipWindow <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ServiceWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vipWindow<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>CustomerType<span class="token punctuation">.</span>VIP<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vipWindow<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        

        <span class="token comment" spellcheck="true">//普通客户拿号</span>
        Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        Integer serviceNumber <span class="token operator">=</span> CodeMachine<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCommonCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createNewCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>serviceNumber <span class="token operator">+</span> <span class="token string">"号普通客户\t等待服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>
                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//快速客户拿号</span>
        Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        Integer serviceNumber <span class="token operator">=</span> CodeMachine<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpressCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createNewCdoe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>serviceNumber <span class="token operator">+</span> <span class="token string">"号快速客户\t等待服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> 
                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//VIP客户拿号</span>
        Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        Integer serviceNumber <span class="token operator">=</span> CodeMachine<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVipCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createNewCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>serviceNumber <span class="token operator">+</span> <span class="token string">"号VIP客户\t等待服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">,</span> 
                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题:"></a><strong>问题:</strong></h2><p>其实一直有个不知道怎么实现的想法,我认为服务窗口的服务类型,是体现在客户类型上.应该是由客户的需啊服务类型,决定窗口的最终服务类型.</p>
<p>是不是可以把窗口真实提供的服务,和通常应该提供的服务作为类型抽取出来,想父类引用指向子类对象那样,可以向下兼容的提供服务.<br>哎,算了,思维比较混了,表达的可能也是比较混乱.</p>
<p>等捋顺了,再更新.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;事物抽象化分析&quot;&gt;&lt;a href=&quot;#事物抽象化分析&quot; class=&quot;headerlink&quot; title=&quot;事物抽象化分析:&quot;&gt;&lt;/a&gt;&lt;strong&gt;事物抽象化分析:&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;项目需求:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用代码演示一个建议的银行业务调度系统,(其实就是叫号系统.)&lt;br&gt;&lt;strong&gt;思路分析:&lt;br&gt;从名词下手,分析可能需要定义的类:&lt;/strong&gt;&lt;br&gt;客户:普通客户,快速客户,VIP客户.&lt;br&gt;窗口:普通窗口,快速窗口,VIP窗口.&lt;br&gt;用户编号:普通编号,快速编号,VIP编号(一个编号对应一个客户)&lt;br&gt;&lt;strong&gt;再从行为上下手,具体分析:&lt;/strong&gt;&lt;br&gt;客户和编号关联,所以用产生一个编号,对应一个客户.——&amp;gt;编号产生类.&lt;br&gt;客户类型不同,所以需要上述不同的三个编号产生类.同时要对他们进行调度—–&amp;gt;编号管理类.&lt;br&gt;服务窗口,对应不同的服务类型,存在三种窗口类型,但每种类型有不同.&lt;br&gt;所以将窗口抽取,类型定义枚举.——&amp;gt;窗口类型枚举,窗口类.&lt;br&gt;下面是跟着老师的步骤一步步来的代码.状态不好,勉强跟上老师思路.还是有很多模糊的地方.想放代码.慢慢消化&lt;/p&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="基础视频" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80%E8%A7%86%E9%A2%91/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="JAVA" scheme="http://gaoll.top/tags/JAVA/"/>
    
      <category term="基础" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-交通灯管理系统</title>
    <link href="http://gaoll.top/2014/01/12/%E4%BA%A4%E9%80%9A%E7%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://gaoll.top/2014/01/12/交通灯管理系统/</id>
    <published>2014-01-11T20:16:00.000Z</published>
    <updated>2017-08-24T07:55:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我的初期代码"><a href="#我的初期代码" class="headerlink" title="我的初期代码"></a><strong>我的初期代码</strong></h2><p><strong>啥也不说了,线上代码.很经典的题目…</strong></p>
<p><strong>我觉得在定义Road中存储汽车的集合,应该用LinkedList,因为有addFist和removeLast方法,既符合实际情况,有相对于没有查询,只增删操作,也提高了效率.</strong><br><strong>还有在定义枚举红绿灯时,也有点小想法,但是还不成熟,先按照老师的整体思路,一步步按照自己的想法做了一遍.</strong></p>
<a id="more"></a>
<hr>
<pre><code>    /*
需求:
模拟十字路口交通灯管理系统
分析:
代码体现现实生活,则需要分析哪些对象,分析用什么类型数据进行代码化.
这里这样分析:
名词提炼:有路,有车,有灯
再提炼动作:车来,车过红绿灯,灯变化.
所以总结:
用集合抽象道路,枚举抽象红绿灯,一个操作类抽象灯控制器,一个描述类抽象汽车.
步骤:
1.定义路类集合.用来存储要过红绿灯的汽车.&lt;四&gt;
2.定义灯枚举类,每个实例对象存在四大方向,每个方向有左转,右转,直行3个子属性,并且关联有对应转换方法.&lt;十二&gt;
3.定义汽车描述类,具有来需要行进方向属,性即:要左行,要右行,要中行.&lt;一&gt;
4.定义交通灯的控制类.初始化交通灯.
5.定义测试类.
*/


//定义汽车类.
public class Car{
    //定义行进方向数组.
    static String[] towardsArr = {&quot;左转&quot;,&quot;直行&quot;,&quot;右转&quot;};
    privateString towards;
    public getTowards(){
        return towards;
    }

    //定义无参构造,车产生则明确行进方向.
    public Car(){
        this.towards = towardsArr[new Random().next(3)];
    }
}

//定义道路类.
public class Rode{
    private List&lt;Car&gt; cars = new LinkedList&lt;Car&gt;();
    private String name;

    public Road(String name){
        this.name = name;

        //1到5秒随机产生一辆需要过红绿灯的车.
        ExecutorService pool = Executors.newSingleThreadExecutor();
        pool.execute(new Runnable(){
            public void run(){
                while(true){
                    try    {
                        Thread.sleep((new Random().nextInt(10)+1)*1000);
                    }catch (InterruptedException e)    {
                        e.printStackTrace();
                    }
                    //出现一辆需要过红绿灯的车
                    Car temp = new Car();
                    cars.addLast(temp);
                }
            }
        });

        //定义一个定时器,每个1秒检查红绿灯状态,匹配该路上第一辆车行进方向为绿灯,则该车通行.
        ScheduledExecutorService timer = Executors.newScheduledThreadPool(1);
        timer.scheduleAtFixedRate(new Runnable(){
            public void run(){
                //判断该路上是否有车,没有车则无需通行.
                if(cars.size()&gt;0){
                    //判断该车所要去方向是否为绿灯,是则通行.
                    boolean lighted = Lamp.valueOf(Road.this.name+temp.getTowards).isLighted();
                    if(lighted){
                        System.out.println(&quot;来自&quot;+Road.this.name+temp.towards+&quot;车辆行驶通过..oO&quot;);
                    }    
                }
            }
        },1,1,TimeUnit.SECONDS);
    }
}

//定义红路灯的枚举
public enum Lamp{
    //四个红绿灯.分别以来自某条路和行进方向来命名.
    东右转(null,null,true),东左转(&quot;西左转&quot;,&quot;南直行&quot;,false),东直行(&quot;西直行&quot;,&quot;东左转&quot;,false),
西右转(null,null,true),西左转(null,null,false),西直行(null,null,false),
南右转(null,null,true),南左转(&quot;北左转&quot;,&quot;东直行&quot;,false),南直行(&quot;北直行&quot;,&quot;南左转&quot;,false),
北右转(null,null,true),北左转(null,null,false),北直行(null,null,false);

    //成员属性:是否绿灯(默认为关闭)
    private boolean lighted;
    //定义获取等状态的方法方法
    public boolean isLighted(){
        return lighted;
    }

    //每个灯对应有相对的灯,和左转灯的指向.(这里因为是枚举,就用那个灯名的字符串代替了)
    private String opposite;
    private String next;

    //用构造定义逆向方向看到的灯和左转方向看到的灯的关联关系.
    //这里要明确,红绿灯方式为:直行,左转,再逆向直行,逆向左转.右转忽略.
    private Lamp(String opposite, String next, boolean lighted){
        this.opposite = opposite;
        this.next = next;
        this.lighted = lighted;
    }

    //当直行方向绿灯亮起的时候,逆向的绿灯也亮起
    public void light(){
        this.lighted = true;
        //判断该灯是否为直行灯(即他有没有逆向灯.)有则同变绿.
        if(opposite != null){
            Lamp.valueOf(opposite).lights();
        }
    }

    //当一个灯变红时,他对面的灯变红,同时他的
    public Lamp turnOff(){
        this.lighted = false;
        if(opposite != null){
            Lamp.valueOf(opposite).turnOff();
        }
        //一个方向的直行左转结束后,就要到逆向的
        Lamp Lamp = null;
        if (next != null) {
            nextLamp = Lamp.valueOf(next);
            nextLamp.light();
        }
        return nextLamp;
    }

}


//定义红绿灯控制器
public class LampCotroller {
    //控制器的作用就是，初始化时一个灯变绿，在一段时间后，变红，调用Lamp的turnOff方法
    private Lamp currentLamp;

    public LampCotroller() {
        currentLamp=Lamp.南直行;
        currentLamp.light();
        //初始化一个红路灯的开始状态.
        ScheduledExecutorService timer=Executors.newScheduledThreadPool(1);
        timer.scheduleAtFixedRate(new Runnable(){
            public void run(){
                currentLamp=currentLamp.turnOff();
            }
        }, 10, 10, TimeUnit.SECONDS);
    }
}

//定义测试类
public class Test{
    public static void main(String[] args){
        String[] from = {&quot;东&quot;,&quot;西&quot;,&quot;南&quot;,&quot;北&quot;};
        for(String temp : from){
            new Roda(temp);
        }
        new LampCotroller();
    }
}
</code></pre><h2 id="分析总结"><a href="#分析总结" class="headerlink" title="分析总结:"></a><strong>分析总结:</strong></h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a><strong>分析:</strong></h3><p>首先需求是要模拟十字路口交通灯管理系统.<br><strong>所以对对象,对象的方法等进行分析</strong>:<br>名词提炼:有路,有车,有灯<br>再提炼动作:车来,车过红绿灯,灯变化.<br><strong>所以抽象出的结论是:</strong><br>用集合抽象道路,枚举抽象红绿灯,一个操作类抽象灯控制器,一个描述类抽象汽车.<br><strong>下面是大体的实现步骤:</strong><br>1.定义路类集合.用来存储要过红绿灯的汽车.&lt;四&gt;<br>2.定义灯枚举类,每个实例对象存在四大方向,每个方向有左转,右转,直行3个子属性,并且关联有对应转换方法.&lt;十二&gt;<br>3.定义汽车描述类,具有来需要行进方向属,性即:要左行,要右行,要中行.&lt;一&gt;<br>4.定义交通灯的控制类.初始化交通灯.<br>5.定义测试类.</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a><strong>总结:</strong></h3><p>首先不得不吐槽下,百度一下,关于交通管理系统这个关键词,就没看到其他不同的代码…跟视频里张老师的代码完全一样…严重怀疑多少人真正写过这个代码.虽然说这个代码不难.不过还是有点感叹,都太懒了…</p>
<p>然后就是我再做的过程中遇到的一些问题.<br><strong>1.定义Road时,用来存储汽车的集合我认为用LinkedList会更好.</strong></p>
<p>因为 我觉得用LinkedList他有独特的addFist和removeLast方法,既符合实际情况,又在没有查询,只增删操作的情况下,提高了效率.<br>(LinkedList底层为链表,ArrayList底层为数组)</p>
<p><strong>2.我觉得应该抽象出来一个汽车描述类.</strong><br>这个类一旦实例化,就应该存在一个属性,就是行进的方向.</p>
<p>然后用出现在那条路上,拼接上车的行进方向确定所需要匹配的红绿灯.<br><strong>3.还有一个想法,暂时有些迷糊,记录下,稍后再探究.</strong></p>
<p>就是我认为灯的枚举中,应该只有四个灯,而这四个灯中,应该分别有三个属性,就是左转,右转,直行,当然,如何体现,容我下回分解…<br><strong>Ps.</strong>今天是个特殊的日子,二十多年的辛苦打怪补兵,今天终于在老姐的助攻下,成功升级,辈分+1.以后也是有外甥的人了.</p>
<p>当然,更让我难以释怀的是,瞬间觉得任重道远起来…孩子,你舅舅我会好好混滴…</p>
<hr>
<h2 id="跟新"><a href="#跟新" class="headerlink" title="跟新:"></a><strong><strong>跟新:</strong></strong></h2><p><strong><strong>关于上面第三个想法,今天自己做了下,将红绿灯数目定为4个,因为事实上每个路口一个灯,只是这个灯中有左转,右转,直行三个成员属性.</strong></strong></p>
<p><strong><strong>还有事关于灯的控制系统,用亮红灯,亮绿灯来控制.</strong></strong><br><strong><strong>下面是新写的代码:</strong></strong></p>
<hr>
<hr>
<pre><code>    //定义测试类
public class Test{
    public static void main(String[] args){
        System.out.println(&quot;\t\t\t \t北\t &quot;);
        System.out.println(&quot;\t\t\t西\t+\t东&quot;);
        System.out.println(&quot;\t\t\t \t南\t &quot;);
        //红绿灯开始工作
        new LampCotroller();
        //车辆出现
        String[] from = {&quot;东&quot;,&quot;西&quot;,&quot;南&quot;,&quot;北&quot;};
        for(String temp : from){
            new Road(temp);
        }
    }
}
</code></pre><pre><code>    //定义汽车类.
public class Car{
    //定义行进方向数组.
    static String[] towardsArr = {&quot;左转&quot;,&quot;直行&quot;,&quot;右转&quot;};
    private int num;
    public String getInfo(){
        return towards+num;
    }
    private String towards;
    public String getTowards(){
        return towards;
    }

    //定义构造,车产生则明确行进方向.
    public Car(int num){
        this.num = num;
        this.towards = towardsArr[new Random().nextInt(3)];
    }
}
</code></pre><pre><code>    //定义枚举交通灯类
public enum Lamp{
    东(&quot;西&quot;,&quot;北&quot;,&quot;南&quot;),
    西(&quot;东&quot;,&quot;南&quot;,&quot;北&quot;),
    南(&quot;北&quot;,&quot;东&quot;,&quot;西&quot;),
    北(&quot;南&quot;,&quot;西&quot;,&quot;东&quot;);

    //成员属性三个方向的等(true为绿灯,false为红灯):
    private boolean 左转 = false;
    private boolean 右转 = false;
    private boolean 直行 = false;

    //定义判断某行进方向是否为绿灯.
    public boolean isGreen(String towards) {
        switch (towards) {
        case &quot;直行&quot;:
            return 直行;
        case &quot;左转&quot;:
            return 左转;
        case &quot;右转&quot;:
            return 右转;
        default:
            return false;
        }
    }

    //对面路,交叉路灯指向.
    private String opposite;
    private String left;
    private String right;

    //初始化灯枚举实例.
    private Lamp(String opposite,String left,String right){
        this.右转 = true;
        this.opposite = opposite;
        this.left = left;
        this.right = right;
    }

    //一个灯先直后左,对面路灯与之相同,垂直路灯与之相反,
    //定义变绿方法
    public void transformGreen(){
        直行 = true;
        左转 = false;
        //同步其他灯的状态
        synch();
        System.out.println(&quot;--------------------------------------------&quot;);
        System.out.println(this.name()+opposite+&quot;\t直行方向\t绿灯---左转方向\t红灯&quot;);
        System.out.println(right+left+&quot;\t直行方向\t红灯---左转方向\t绿灯&quot;);
        System.out.println(&quot;--------------------------------------------&quot;);
    }
    //定义变红方法
    public void transformRed(){
        直行 = false;
        左转 = true;
        //同步其他灯的状态.
        synch();
        System.out.println(&quot;--------------------------------------------&quot;);
        System.out.println(this.name()+opposite+&quot;\t直行方向\t红灯---左转方向\t绿灯&quot;);
        System.out.println(right+left+&quot;\t直行方向\t绿灯---左转方向\t红灯&quot;);
        System.out.println(&quot;--------------------------------------------&quot;);
    }

    //定义私有方法,封装同步其他灯的装态
    private void synch(){
        Lamp.valueOf(opposite).直行 = 直行 ;
        Lamp.valueOf(opposite).左转 = 左转 ;
        Lamp.valueOf(left).直行 = !直行 ;
        Lamp.valueOf(left).左转 = !左转 ;
        Lamp.valueOf(right).直行 = !直行 ;
        Lamp.valueOf(right).左转 = !左转 ;
    }
}
</code></pre><pre><code>    //定义红绿灯控制器
public class LampCotroller {

    public LampCotroller() {
        // 指定一个初始化用红绿灯.
        ScheduledExecutorService timer = Executors.newScheduledThreadPool(1);
        timer.scheduleAtFixedRate(new Runnable() {
            @Override
            public void run() {
                if (Lamp.南.isGreen(&quot;直行&quot;)) {// 开启控制系统.必然有第一个灯是红或者绿的情况.
                    Lamp.南.transformRed();
                } else {
                    Lamp.南.transformGreen();
                }
            }
        }, 0, 10, TimeUnit.SECONDS);
    }
}
</code></pre><pre><code>    //定义道路
public class Road{
    private LinkedList&lt;Car&gt; cars = new LinkedList&lt;Car&gt;();
    private String name;

    public Road(String name){
        this.name = name;

        //1到5秒随机产生一辆需要过红绿灯的车.
        ExecutorService pool = Executors.newSingleThreadExecutor();
        pool.execute(new Runnable(){
            public void run(){
                int count = 1;
                while(true){
                    try    {
                        Thread.sleep((new Random().nextInt(10)+1)*1000);
                    }catch (InterruptedException e)    {
                        e.printStackTrace();
                    }
                    //出现一辆需要过红绿灯的车
                    cars.addLast(new Car(count++));
                }
            }
        });

        //定义一个定时器,每个1秒检查红绿灯状态,匹配该路上第一辆车行进方向为绿灯,则该车通行.
        ScheduledExecutorService timer = Executors.newScheduledThreadPool(1);
        timer.scheduleAtFixedRate(new Runnable(){
            public void run(){
                //当且仅当该路上有车时判断是否过红绿灯.
                if(cars.size()&gt;0){
                    //判断该车要去方向是否为绿灯.是则同行.                                        
                    if( Lamp.valueOf(Road.this.name).isGreen(cars.getFirst().getTowards())){
                        System.out.println(&quot;来自\t&quot;+Road.this.name+&quot;边\t&quot;+cars.removeFirst().getInfo()+&quot;号车辆\t行驶通过&quot;);
                    }
                }
            }
        },
        1,
        1,
        TimeUnit.SECONDS);
    }
}
</code></pre><p><strong>实现效果:</strong></p>
<p><strong><strong><img src="http://img.blog.csdn.net/20140112205610562?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></strong></strong><br><strong><strong><img src="" alt=""></strong></strong></p>
<hr>
<hr>
<p><strong>———————–</strong> <a href="http://edu.csdn.net/heima/" target="_blank" rel="external">android培训</a> <strong>、</strong> <a href="http://edu.csdn.net/heima" target="_blank" rel="external">java培训</a> <strong>、java学习型技术博客、期待与您交流！———————-</strong></p>
<hr>
<p><strong><strong>详情请查看：<a href="http://edu.csdn.net/heima" target="_blank" rel="external">http://edu.csdn.net/</a></strong></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;我的初期代码&quot;&gt;&lt;a href=&quot;#我的初期代码&quot; class=&quot;headerlink&quot; title=&quot;我的初期代码&quot;&gt;&lt;/a&gt;&lt;strong&gt;我的初期代码&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;啥也不说了,线上代码.很经典的题目…&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我觉得在定义Road中存储汽车的集合,应该用LinkedList,因为有addFist和removeLast方法,既符合实际情况,有相对于没有查询,只增删操作,也提高了效率.&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;还有在定义枚举红绿灯时,也有点小想法,但是还不成熟,先按照老师的整体思路,一步步按照自己的想法做了一遍.&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="基础视频" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80%E8%A7%86%E9%A2%91/"/>
    
      <category term="JAVA" scheme="http://gaoll.top/tags/JAVA/"/>
    
      <category term="思路" scheme="http://gaoll.top/tags/%E6%80%9D%E8%B7%AF/"/>
    
      <category term="交通" scheme="http://gaoll.top/tags/%E4%BA%A4%E9%80%9A/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-动态代理(面向切面)</title>
    <link href="http://gaoll.top/2014/01/11/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86(%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2)/"/>
    <id>http://gaoll.top/2014/01/11/动态代理(面向切面)/</id>
    <published>2014-01-11T10:39:00.000Z</published>
    <updated>2017-08-24T07:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1-面向切面-AOP-思想"><a href="#1-1-面向切面-AOP-思想" class="headerlink" title="1.1.面向切面(AOP)思想"></a>1.1.面向切面(AOP)思想</h3><p>系统中存在交叉业务，一个交叉业务就是要切入到系统中的某一个方面,比如多个类的共方法<br> 例如:需要达到这样的效果:运行某个方法,在可以得到方法应有返回值的同时,可以知道该方法运行的时间. 交叉业务的编程问题即为面向方面的编程（Aspect oriented program ,简称AOP），AOP的目标就是要使交叉业务模块化.<br> 可以采用将切面代码移动到原始方法的周围，这与直接在方法中编写切面代码的运行效果是一样的<br> 使用代理技术正好可以解决这种问题，代理是实现AOP功能的核心和关键技术.</p>
<a id="more"></a>
<h3 id="1-2-代理的概念"><a href="#1-2-代理的概念" class="headerlink" title="1.2.代理的概念"></a><strong>1.2.代理的概念</strong></h3><p>要为已存在的多个具有相同接口的目标类的各个方法增加一些系统功能，例如，异常处理、日志、计算方法的运行时间、事务管理、等等，你准备如何做？<br> 编写一个与目标类具有相同接口的代理类，代理类的每个方法调用目标类的相同方法，并在调用方法时加上系统功能的代码。<br> 如果采用工厂模式和配置文件的方式进行管理，则不需要修改客户端程序，在配置文件中配置是使用目标类、还是代理类，这样以后很容易切换,<br> 譬如，想要日志功能时就配置代理类，否则配置目标类，这样，增加系统功能很容易，以后运行一段时间后，又想去掉系统功能也很容易。</p>
<p><img src="http://img.blog.csdn.net/20140111175452156?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="2-java动态代理"><a href="#2-java动态代理" class="headerlink" title="2.java动态代理"></a>2.java动态代理</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1.概述"></a><strong>2.1.概述</strong></h3><p>要为系统中的各种接口的类增加代理功能，那将需要太多的代理类，全部采用静态代理方式，不现实.<br>JVM可以在运行期动态生成出类的字节码，这种动态生成的类往往被用作代理类，即动态代理类。<br>JVM生成的动态类必须实现一个或多个接口，所以，JVM生成的动态类只能用作具有相同接口的目标类的代理。<br>CGLIB库可以动态生成一个类的子类，一个类的子类也可以用作该类的代理，所以，如果要为一个没有实现接口的类生成动态代理类，那么可以使用CGLIB库。<br>代理类的各个方法中通常除了要调用目标的相应方法和对外返回目标返回的结果外，还可以在代理方法中的如下四个位置加上系统功能代码：<br>所以:功能代码可以是:在调用目标方法之前,在调用目标方法之后,在调用目标方法前后,在处理目标方法异常的catch块中.</p>
<hr>
<h3 id="2-2-Proxy类"><a href="#2-2-Proxy类" class="headerlink" title="2.2.Proxy类"></a>2.2.Proxy类</h3><p><strong>静态方法:</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> InvocationHandler <span class="token function">getInvocationHandler</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">)</span> 
    <span class="token comment" spellcheck="true">//返回指定代理实例的调用处理程序。</span>
    <span class="token comment" spellcheck="true">//(其实就是对被代理类所做的切面化操作.) </span>
<span class="token keyword">static</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getProxyClass</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> interfaces<span class="token punctuation">)</span> 
    <span class="token comment" spellcheck="true">//返回代理类的 java.lang.Class 对象，并向其提供类加载器和参数列表接口数组。 </span>
    <span class="token comment" spellcheck="true">//(通过这个Class对象的方法,可以获得一个代理类的实例)</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isProxyClass</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cl<span class="token punctuation">)</span> 
    <span class="token comment" spellcheck="true">//当且仅当指定的类通过 getProxyClass 方法或 newProxyInstance 方法动态生成为代理类时，返回 true。 </span>
<span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span> InvocationHandler h<span class="token punctuation">)</span> 
    <span class="token comment" spellcheck="true">//返回一个指定接口的代理类实例，该接口可以将方法调用指派到指定的调用处理程序</span>
</code></pre>
<h3 id="2-3-字节尝试写一个代理类的代码"><a href="#2-3-字节尝试写一个代理类的代码" class="headerlink" title="2.3.字节尝试写一个代理类的代码:"></a><strong>2.3.字节尝试写一个代理类的代码:</strong></h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * 需求:
 * 写一个ArrayList类的代理，实现和ArrayList中完全相同的功能，并可以计算每个方法运行的时间。
 * 思路:
 * 代理运用的是一种面向切面编程的思想.代理类在目标类的方法前,后,中的异常处理中嵌入其他功能方法等.
 * 这里想要创建一个ArrayList代理,可以直接使用java提供的动态代理来实现.
 * 步骤:
 * 1.建立Advice接口,定义代理添加的功能接口.
 * 2.建立接口实现类,实现计算每个方法运行时间的方法.
 * 3.通过Proxy类的静态方法建立获得ArrayList的一个基本动态类(具有和ArrayList相同的方法)
 * */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Advice</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">Advice</span><span class="token punctuation">{</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该方法运行时间为:"</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"方法返回:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>


<span class="token comment" spellcheck="true">//按照Proxy提供的静态方法直接构建一个代理类</span>
<span class="token keyword">class</span> <span class="token class-name">ArrayListProxy</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> MyAdvice temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Collection collProxy <span class="token operator">=</span> <span class="token punctuation">(</span>Collection<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ArrayListProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//        List &lt;?> listProxy = (List&lt;?>) Proxy.newProxyInstance(ArrayListProxy.class.getClassLoader(), new Class[]{List.class}, new InvocationHandler() {</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
                    <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>
                        temp<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        Object obj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        temp<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span>ArrayList<span class="token punctuation">)</span> collProxy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collProxy<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        collProxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        collProxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//按照逐步的方法尝试获得一个代理类</span>
<span class="token keyword">class</span> <span class="token class-name">ArrayListProxy_1</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//获得代理类Class文件</span>
        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">getProxyClass</span><span class="token punctuation">(</span>ArrayListProxy_1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Collection<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        Class clazz = Proxy.getProxyClass(ArrayListProxy.class.getClassLoader(), ArrayList.class);</span>
                <span class="token comment" spellcheck="true">//Exception in thread "main" java.lang.IllegalArgumentException: java.util.ArrayList is not an interface</span>
<span class="token comment" spellcheck="true">//        System.out.println(clazz);</span>

        <span class="token comment" spellcheck="true">//通过Class文件获得实例对象</span>
<span class="token comment" spellcheck="true">//        Collection alProxy = (Collection) clazz.newInstance();</span>
<span class="token comment" spellcheck="true">//        System.out.println(alProxy);</span>
                <span class="token comment" spellcheck="true">//Exception in thread "main" java.lang.InstantiationException: com.sun.proxy.$Proxy0</span>
                <span class="token comment" spellcheck="true">//无法被实例化,没有对应构造方法.</span>
        <span class="token comment" spellcheck="true">//找构造</span>
        Constructor<span class="token punctuation">[</span><span class="token punctuation">]</span> cons <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> Constructor temp <span class="token operator">:</span> cons<span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">//public com.sun.proxy.$Proxy0(java.lang.reflect.InvocationHandler)</span>

        <span class="token comment" spellcheck="true">//用对应的构造,建立实例对象</span>

        <span class="token comment" spellcheck="true">//这里</span>
        Collection alProxy <span class="token operator">=</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span>cons<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//        Collection&lt;?> alProxy =(Collection&lt;?>)cons[0].newInstance(new InvocationHandler(){</span>
<span class="token comment" spellcheck="true">//        ArrayList&lt;?> alProxy =(ArrayList)cons[0].newInstance(new InvocationHandler(){</span>
            ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object alProxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
                    <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>
                        MyAdvice temp <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">MyAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        temp<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        Object tempObj <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        temp<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> tempObj<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        alProxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>alProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        alProxy.get(0);        //   用不了子类的功能,只能用那个接口Collection中的方法.    </span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a><strong>3.总结</strong></h2><p><strong>在自己一步一步用不同方法写一个代理类出来的过程中,发现很多看上去明白了,但实际上只是连想都没开始想的问题.</strong></p>
<h3 id="1-参数列表中的接口Class参数"><a href="#1-参数列表中的接口Class参数" class="headerlink" title="1.参数列表中的接口Class参数"></a><strong>1.参数列表中的接口Class参数</strong></h3><p>首先就是构造一个代理类实例对象需要的那个Interface接口参数.老师,用的为Collection.class,结果就让我固定了思维,在需要做一个ArrayList代理是,毫不犹豫的将ArrayList实现的这个父类接口放了进去.</p>
<p>所以,就出现了我代码里测试的那样,这样得到的代理,在调用ArrayList的特有方法的时候,jvm编译时都无法通过,说不识别的方法名.还在考虑难道一个具体实现了某个接口的子类,拥有了父类没有的特有功能,那在代理中就无法使用,那样这代理还有什么意义?</p>
<p>最终在Class类中,找到了答案.Class类中提供了方法:</p>
<p>getInterfaces<br>public Class&lt;?&gt;[] getInterfaces()确定此对象所表示的类或接口实现的接口。 </p>
<p>通过Arraylist.class.getInterfaces(),得到的Class&lt;?&gt;[]作为参数构造出来的代理就解决了我刚开始遇到的问题.</p>
<h3 id="2-在代理类中-对目标功能的封装"><a href="#2-在代理类中-对目标功能的封装" class="headerlink" title="2.在代理类中,对目标功能的封装"></a><strong>2.在代理类中,对目标功能的封装</strong></h3><p>在写代理类时,初期就是直接在InvocationHandler的方法中直接将操作代码写进去.后来,才发现可以将功能抽取,到时候在类中接收一个抽取出的接口的实例对象,调用需要增加的功能即可.大大增加可扩展性.</p>
<h3 id="3-装饰设计模式and代理模式"><a href="#3-装饰设计模式and代理模式" class="headerlink" title="3.装饰设计模式and代理模式"></a>3.装饰设计模式and代理模式</h3><p>还有一点,就是冥冥中觉得,装饰设计模式跟代理(面向切面)的思想应该有很大的隐情,有一腿.前者,只不过是把需要功能进行增强的类的实例当作了一个构造的实例参数传入了包装类中.代理则干脆直接伪装成一个目标类,用户以为自己操作的是目标类,实际上是一个披了目标外表的代理类…</p>
<p>他们两者到底有什么关系?等想的有些头绪再跟新吧…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h2&gt;&lt;h3 id=&quot;1-1-面向切面-AOP-思想&quot;&gt;&lt;a href=&quot;#1-1-面向切面-AOP-思想&quot; class=&quot;headerlink&quot; title=&quot;1.1.面向切面(AOP)思想&quot;&gt;&lt;/a&gt;1.1.面向切面(AOP)思想&lt;/h3&gt;&lt;p&gt;系统中存在交叉业务，一个交叉业务就是要切入到系统中的某一个方面,比如多个类的共方法&lt;br&gt; 例如:需要达到这样的效果:运行某个方法,在可以得到方法应有返回值的同时,可以知道该方法运行的时间. 交叉业务的编程问题即为面向方面的编程（Aspect oriented program ,简称AOP），AOP的目标就是要使交叉业务模块化.&lt;br&gt; 可以采用将切面代码移动到原始方法的周围，这与直接在方法中编写切面代码的运行效果是一样的&lt;br&gt; 使用代理技术正好可以解决这种问题，代理是实现AOP功能的核心和关键技术.&lt;/p&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="基础视频" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80%E8%A7%86%E9%A2%91/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="JAVA" scheme="http://gaoll.top/tags/JAVA/"/>
    
      <category term="教程" scheme="http://gaoll.top/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-反射 &amp; JavaBean</title>
    <link href="http://gaoll.top/2014/01/11/%E5%8F%8D%E5%B0%84%20&amp;%20JavaBean/"/>
    <id>http://gaoll.top/2014/01/11/反射 &amp; JavaBean/</id>
    <published>2014-01-11T07:36:00.000Z</published>
    <updated>2017-08-24T07:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Class类-字节码文件"><a href="#1-Class类-字节码文件" class="headerlink" title="1.Class类(字节码文件)"></a><strong>1.Class类(字节码文件)</strong></h2><h3 id="1-1-概念理解"><a href="#1-1-概念理解" class="headerlink" title="1.1.概念理解"></a><strong>1.1.概念理解</strong></h3><p>Java类用于描述一类事物的共性，该类事物有什么属性，没有什么属性，至于这个属性的值是什么，则是由这个类的实例对象来确定的，不同的实例对象有不同的属性值。Java程序中的各个Java类，它们是否属于同一类事物，所以可以用一个类来描述这类事物,这个类的名字就是Class，要注意与小写class关键字的区别。</p>
<p><strong>Class类描述了哪些方面的信息:</strong><br>类的名字，类的访问属性，类所属于的包名，字段名称的列表、方法名称的列表，等等。学习反射，首先就要明白Class这个类。</p>
<p><strong>写如下代码进行对比理解：</strong><br>每个java类都是Class的一个实例对象，它们的内容不同，但是，它们的特征相同，譬如，都有方法，有字段，有父类，有包。</p>
<a id="more"></a>
<h3 id="1-2-Class类获得方法"><a href="#1-2-Class类获得方法" class="headerlink" title="1.2.Class类获得方法"></a><strong>1.2.Class类获得方法</strong></h3><p><strong>类名.class</strong></p>
<p><strong>对象名.getClass();</strong><br><strong>Class.forName(类名)</strong>;</p>
<p>这三种方法,最常用的为第二种,第三种.第三种在后期可以通过配置文件读取,所以更为常用.第一中在反射方法的参数类型中常使用.</p>
<h3 id="1-3-注意问题"><a href="#1-3-注意问题" class="headerlink" title="1.3.注意问题"></a><strong>1.3.注意问题</strong></h3><p>加载了字节码，并调用了其getMethods之类的方法，但是没有看到类的静态代码块被执行，只有在第一个实例对象被创建时，这个静态代码才会被执行。所以准确的说，静态代码块不是在类加载时被调用的，而是第一个实例对象时加载字节码被创建时才执行的。</p>
<h3 id="1-4-Class类方法"><a href="#1-4-Class类方法" class="headerlink" title="1.4.Class类方法"></a><strong>1.4.Class类方法</strong></h3><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p><strong><img src="http://img.blog.csdn.net/20140106222755015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<p><strong><img src="http://img.blog.csdn.net/20140106222814375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong><br><strong><img src="http://img.blog.csdn.net/20140106222829687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<h2 id="2-反射"><a href="#2-反射" class="headerlink" title="2.反射"></a><strong>2.反射</strong></h2><p><strong>2.1.概念理解</strong></p>
<p>反射就是把Java类中的各种成分映射成相应的java类。例如，一个Java类中用一个Class类的对象来表示，一个类中的组成部分：成员变量，方法，构造方法，包等等信息也用一个个的Java类来表示，就像汽车是一个类，汽车中的发动机，变速箱等等也是一个个的类。表示java类的Class类显然要提供一系列的方法，来获得其中的变量，方法，构造方法，修饰符，包等信息，这些信息就是用相应类的实例对象来表示，它们是Field、Method、Contructor、Package等等。<br>一个类中的每个成员都可以用相应的反射API类的一个实例对象来表示，通过调用Class类的方法可以得到这些实例对象后可以通过将对象,参数作为该反射出来对象的参数,进行正向操作.<br><strong>2.2.构造.成员.方法的对应封装类</strong></p>
<h3 id="Constructor类-构造"><a href="#Constructor类-构造" class="headerlink" title="Constructor类:构造"></a><strong>Constructor类:构造</strong></h3><p><strong>得到某个类所有的构造方法</strong>：<br>例子：Constructor [] constructors= Class.forName(“java.lang.String”).getConstructors();<br><strong>得到某一个构造方法</strong>：<br>例子：    Constructor constructor = Class.forName(“java.lang.String”).getConstructor(StringBuffer.class);<br>//获得方法时要用到类型<br><strong>创建实例对象</strong>：<br>通常方式：String str = new String(new StringBuffer(“abc”));<br>反射方式： String str = (String)constructor.newInstance(new StringBuffer(“abc”));<br>//调用获得的方法时要用到上面相同类型的实例对象<br><strong>Class.newInstance()方法</strong>：<br>例子：String obj = (String)Class.forName(“java.lang.String”).newInstance();<br>该方法内部先得到默认的构造方法，然后用该构造方法创建实例对象。<br>该方法内部的具体代码是怎样写的呢？用到了缓存机制来保存默认构造方法的实例对象。</p>
<h3 id="Filed类-成员变量"><a href="#Filed类-成员变量" class="headerlink" title="Filed类:成员变量"></a>Filed类:成员变量</h3><p><strong>问题</strong>：得到的Field对象是对应到类上面的成员变量，还是对应到对象上的成员变量？类只有一个，而该类的实例对象有多个，如果是与对象关联，哪关联的是哪个对象呢？所以字段fieldX 代表的是x的定义(或者说声明)，而不是具体的x变量。所以,反射出的东西的操作,必须依托一个对象来体现.<br>示例代码：</p>
<pre class=" language-java"><code class="language-java">    ReflectPoint point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectPoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Field y <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"cn.itcast.corejava.ReflectPoint"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//Field x = Class.forName("cn.itcast.corejava.ReflectPoint").getField("x");</span>
Field x <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"cn.itcast.corejava.ReflectPoint"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
x<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="Method类-成员方法"><a href="#Method类-成员方法" class="headerlink" title="Method类:成员方法"></a>Method类:成员方法</h3><p><strong>得到类中的某一个方法</strong>：<br>例子：    Method charAt = Class.forName(“java.lang.String”).getMethod(“charAt”, int.class);<br><strong>调用方法：<br>通常方式</strong>：System.out.println(str.charAt(1));<br><strong>反射方式</strong>： System.out.println(charAt.invoke(str, 1));<br>如果传递给Method对象的invoke()方法的第一个参数为null，这有着什么样的意义呢？说明该Method对象对应的是一个静态方法！<br><strong>jdk1.4和jdk1.5的invoke方法的区别(可变参数)：</strong><br>Jdk1.5：public Object invoke(Object obj,Object… args)<br>Jdk1.4：public Object invoke(Object obj,Object[] args)，即按jdk1.4的语法，需要将一个数组作为参数传递给invoke方法时，数组中的每个元素分别对应被调用方法中的一个参数，所以，调用charAt方法的代码也可以用Jdk1.4改写为 charAt.invoke(“str”, new Object[]{1})形式。</p>
<h3 id="4-数组的反射"><a href="#4-数组的反射" class="headerlink" title="4.数组的反射"></a><strong>4.数组的反射</strong></h3><h2 id="3-反射—-内省—-JavaBean"><a href="#3-反射—-内省—-JavaBean" class="headerlink" title="3.反射—-内省—-JavaBean"></a><strong>3.反射—-内省—-JavaBean</strong></h2><p><strong>3.1.概念</strong></p>
<p>JavaBean是一种特殊的Java类，主要用于传递数据信息，这种java类中的方法主要用于访问私有的字段，且方法名符合某种命名规则。<br>如果要在两个模块之间传递多个信息，可以将这些信息封装到一个JavaBean中，这种JavaBean的实例对象通常称之为值对象（Value Object，简称VO）。这些信息在类中用私有字段来存储，如果读取或设置这些字段的值，则需要通过一些相应的方法来访问，大家觉得这些方法的名称叫什么好呢？JavaBean的属性是根据其中的setter和getter方法来确定的，而不是根据其中的成员变量。如果方法名为setId，中文意思即为设置id，至于你把它存到哪个变量上，用管吗？如果方法名为getId，中文意思即为获取id，至于你从哪个变量上取，用管吗？去掉set前缀，剩余部分就是属性名，如果剩余部分的第二个字母是小写的(就代表是定义get,set方法是将首字母大写了)，则把剩余部分的首字母改成小的。</p>
<h3 id="3-2-涉及到的几个类和接口"><a href="#3-2-涉及到的几个类和接口" class="headerlink" title="3.2.涉及到的几个类和接口"></a>3.2.涉及到的几个类和接口</h3><p><strong>Introspector:</strong></p>
<p>The Introspector class provides a standard way for tools to learn about the properties, events, and methods supported by a target Java Bean.<br>(我理解他就像一个静态方法库一样的概念,给想要运用内省操作的其他类或者接口等提供静态方法支持)</p>
<p><strong>MethodDescriptor:</strong><br>A MethodDescriptor describes a particular method that a Java Bean supports for external access from other components.</p>
<p>(我理解就是,一个该类的实例对象,就是封装某些信息,描述某些个符合JavaBean规则的类的某个成员属性的赋值获取等方法的信息)<br><strong>PropertyDescriptor:(目前不知道MethodDescriptor什么用,有空上网研究下)</strong></p>
<p>A PropertyDescriptor describes one property that a Java Bean exports via a pair of accessor methods.<br>(我的理解就是,一个该类的实例对象,就是疯涨了描述一个符合JavaBean规则的类的某个成员属性的信息)</p>
<p><strong>BeanInfo:</strong><br>A bean implementor who wishes to provide explicit information about their bean may provide a BeanInfo class that implements this BeanInfo interface and provides explicit information about the methods, properties, events, etc, of their bean. </p>
<p>(这个就是每个实例就是封装了所有的跟某个成员属性相关的变量声明,方法(赋值,获取方法),等.每个BeanInfo应该对应一对存储器,一个PropertyDescriptor,一个MethodDescriptor.)<br><strong>他们之间的关系:</strong></p>
<p>我们可以通过对一个类,调用Introspector中的静态方法,获得他类中所有的BeanInfo(返回值理所当然是个数组.).<br>在通过BeanInfo方法,可以选择性的拿到PropertyDescriptor.</p>
<p>然后再通过PropertyDescriptor中的方法,可以执行对该属性的赋值.或者了解各种信息.<br>(下面第二个代码用的就是这写步骤)</p>
<h3 id="3-3-代码"><a href="#3-3-代码" class="headerlink" title="3.3.代码"></a><strong>3.3.代码</strong></h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*
需求:
学习内省,JavaBean的使用
*/</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>*<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//    public void setName(String name){</span>
<span class="token comment" spellcheck="true">//        this.name=name;</span>
<span class="token comment" spellcheck="true">//    }</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//    public String getName(){</span>
<span class="token comment" spellcheck="true">//        return name;</span>
<span class="token comment" spellcheck="true">//    }</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">JavaBeanDemo</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//JavaBean的内省方式设置属性值.</span>
<span class="token comment" spellcheck="true">//        Student s1 = new Student();</span>
<span class="token comment" spellcheck="true">//        String propertyName = "name";</span>
<span class="token comment" spellcheck="true">//        PropertyDescriptor pd = new PropertyDescriptor(propertyName,s1.getClass());</span>
<span class="token comment" spellcheck="true">//        Method methodSetName = pd.getWriteMethod();</span>
<span class="token comment" spellcheck="true">//        Method methodGetName = pd.getReadMethod();</span>
<span class="token comment" spellcheck="true">//        methodSetName.invoke(s1,"高富帅");</span>
<span class="token comment" spellcheck="true">//        System.out.println(methodGetName.invoke(s1)); </span>

        <span class="token comment" spellcheck="true">//反射方式设置属性值.</span>
        Class <span class="token class-name">studentClass</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field name <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span><span class="token string">"屌丝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        System.out.println(s1.getName());</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">package</span> com<span class="token punctuation">.</span>back<span class="token punctuation">.</span>han<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeanInfo<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>Introspector<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>PropertyDescriptor<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 存在一个JavaBean，它包含以下几种可能的属性： 1:boolean/Boolean 2:int/Integer 3:String
 * 4:double/Double 属性名未知，现在要给这些属性设置默认值，以下是要求的默认值： String类型的默认值为字符串
 * www.itheima.com int/Integer类型的默认值为100 boolean/Boolean类型的默认值为true
 * double/Double的默认值为0.01D.
 * 只需要设置带有getXxx/isXxx/setXxx方法的属性，非JavaBean属性不设置，请用代码实现
 * 
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test6</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Bean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">init</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> Bean <span class="token function">init</span><span class="token punctuation">(</span>Bean bean<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>

        BeanInfo bi <span class="token operator">=</span> Introspector<span class="token punctuation">.</span><span class="token function">getBeanInfo</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PropertyDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> pds <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>PropertyDescriptor pd <span class="token operator">:</span> pds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Method rm <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getWriteMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> pd<span class="token punctuation">.</span><span class="token function">getPropertyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                rm<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> <span class="token string">"www.itheima.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> pd<span class="token punctuation">.</span><span class="token function">getPropertyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                rm<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> pd<span class="token punctuation">.</span><span class="token function">getPropertyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                rm<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> pd<span class="token punctuation">.</span><span class="token function">getPropertyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                rm<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> <span class="token number">0.01d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Bean</span> <span class="token punctuation">{</span>
    String company<span class="token punctuation">;</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> good<span class="token punctuation">;</span>
    <span class="token keyword">double</span> cash<span class="token punctuation">;</span>

    <span class="token keyword">public</span> String <span class="token function">getCompany</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> company<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCompany</span><span class="token punctuation">(</span>String company<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>company <span class="token operator">=</span> company<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> number<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isGood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> good<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGood</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> good<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>good <span class="token operator">=</span> good<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getCash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> cash<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCash</span><span class="token punctuation">(</span><span class="token keyword">double</span> cash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cash <span class="token operator">=</span> cash<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Bean [company="</span> <span class="token operator">+</span> company <span class="token operator">+</span> <span class="token string">", number="</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">", good="</span>
                <span class="token operator">+</span> good <span class="token operator">+</span> <span class="token string">", cash="</span> <span class="token operator">+</span> cash <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Class类-字节码文件&quot;&gt;&lt;a href=&quot;#1-Class类-字节码文件&quot; class=&quot;headerlink&quot; title=&quot;1.Class类(字节码文件)&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.Class类(字节码文件)&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-1-概念理解&quot;&gt;&lt;a href=&quot;#1-1-概念理解&quot; class=&quot;headerlink&quot; title=&quot;1.1.概念理解&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.1.概念理解&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Java类用于描述一类事物的共性，该类事物有什么属性，没有什么属性，至于这个属性的值是什么，则是由这个类的实例对象来确定的，不同的实例对象有不同的属性值。Java程序中的各个Java类，它们是否属于同一类事物，所以可以用一个类来描述这类事物,这个类的名字就是Class，要注意与小写class关键字的区别。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Class类描述了哪些方面的信息:&lt;/strong&gt;&lt;br&gt;类的名字，类的访问属性，类所属于的包名，字段名称的列表、方法名称的列表，等等。学习反射，首先就要明白Class这个类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写如下代码进行对比理解：&lt;/strong&gt;&lt;br&gt;每个java类都是Class的一个实例对象，它们的内容不同，但是，它们的特征相同，譬如，都有方法，有字段，有父类，有包。&lt;/p&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="基础视频" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80%E8%A7%86%E9%A2%91/"/>
    
      <category term="JAVA" scheme="http://gaoll.top/tags/JAVA/"/>
    
      <category term="反射" scheme="http://gaoll.top/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="内省" scheme="http://gaoll.top/tags/%E5%86%85%E7%9C%81/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-泛型(浅识)</title>
    <link href="http://gaoll.top/2014/01/11/%E6%B3%9B%E5%9E%8B(%E6%B5%85%E8%AF%86)/"/>
    <id>http://gaoll.top/2014/01/11/泛型(浅识)/</id>
    <published>2014-01-11T07:26:00.000Z</published>
    <updated>2017-08-24T07:51:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>(部分内容,知其然,不知其所以然,先记下,慢慢品)</strong></p>
<hr>
<p><strong>题外话:</strong></p>
<p>开始学习张孝祥老师的基础加强视频,发现,自以为学的不错,其实就像只是用300cc的瓶子去接了250cc的水.倘若倒入1000cc的瓶子中,一下就觉得空荡荡了.<br>学习过程是给300cc瓶子灌水的过程.灌水的过程固然重要,适当的升级瓶子更是必不可少.感谢张孝祥老师.</p>
<p>再次缅怀已逝的张孝祥老师.</p>
<a id="more"></a>
<h2 id="1-泛型基本知识"><a href="#1-泛型基本知识" class="headerlink" title="1.泛型基本知识"></a><strong>1.泛型基本知识</strong></h2><p><strong>术语</strong></p>
<p>ArrayList<e>:泛型类型<br>ArrayList<e>中的E:称为类型变量或类型参数</e></e></p>
<p>ArrayList<integer>:称为参数化的类型<br>ArrayList<integer>中的Integer:称为类型参数的实例或实际类型参数</integer></integer></p>
<p>ArrayList<integer>中的&lt;&gt; 为: type of<br>ArrayList:称为原始类型</integer></p>
<h3 id="1-1-参数化类型与原始类型的兼容性"><a href="#1-1-参数化类型与原始类型的兼容性" class="headerlink" title="1.1.参数化类型与原始类型的兼容性"></a><strong>1.1.参数化类型与原始类型的兼容性</strong></h3><p>参数化类型可以引用一个原始类型的对象，编译报告警告</p>
<p>例如， Collection<string> c = new Vector();<br>原始类型可以引用一个参数化类型的对象，编译报告警告</string></p>
<p>例如， Collection c = new Vector<string>();</string></p>
<h3 id="1-2-参数化类型不考虑类型参数的继承关系"><a href="#1-2-参数化类型不考虑类型参数的继承关系" class="headerlink" title="1.2.参数化类型不考虑类型参数的继承关系"></a><strong>1.2.参数化类型不考虑类型参数的继承关系</strong></h3><p>Vector<string> v = new Vector<object>();</object></string></p>
<p>Vector<object> v = new Vector<string>();</string></object></p>
<h3 id="1-3-编译器不允许创建泛型变量的数组"><a href="#1-3-编译器不允许创建泛型变量的数组" class="headerlink" title="1.3.编译器不允许创建泛型变量的数组"></a><strong>1.3.编译器不允许创建泛型变量的数组</strong></h3><p>即在创建数组实例时，数组的元素不能使用参数化的类型. 例如，下面语句有错误：</p>
<p>Vector<integer> vectorList[] = new Vector<integer>[10];<br>注:老师这里说的不能定义泛型变量数组,是赋值两边都加泛型,其实,我试了下,在数组变量的声明上加上泛型是可以的.</integer></integer></p>
<p>Vector <integer> vectorList[] = new Vector [10];<br>Vector <integer> vectorList[] = new Vector<integer>[10];</integer></integer></integer></p>
<hr>
<h2 id="2-泛型中的？通配符"><a href="#2-泛型中的？通配符" class="headerlink" title="2.泛型中的？通配符"></a><strong>2.泛型中的？通配符</strong></h2><h3 id="2-1由一个问题引入："><a href="#2-1由一个问题引入：" class="headerlink" title="2.1由一个问题引入："></a><strong>2.1由一个问题引入：</strong></h3><p>定义一个方法，该方法用于打印出任意参数化类型的集合中的所有数据，该方法如何定义呢？</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printCollection</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>Object<span class="token operator">></span> cols<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>Object obj<span class="token operator">:</span>cols<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
         cols<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没错</span>
         cols <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Date<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里相当于这样:Collection&lt;Object> cols = new HashSet&lt;Date>().</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>正确方式：</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printCollection</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cols<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>Object obj<span class="token operator">:</span>cols<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cols<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//错误，因为它不知自己未来匹配就一定是String.</span>
                    <span class="token comment" spellcheck="true">//相当于:new Collection&lt;?>().add(?)  而传入String.这样就会强制让前面的?变为String了       </span>
        cols<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//没错，此方法与类型参数没有关系</span>
        cols <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Date<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="2-2-总结"><a href="#2-2-总结" class="headerlink" title="2.2.总结"></a><strong>2.2.总结</strong></h3><p>使用?通配符可以引用其他各种参数化的类型，?通配符定义的变量主要用作引用，可以调用与参数化无关的方法，不能调用与参数化有关的方法。</p>
<h3 id="2-3-扩展"><a href="#2-3-扩展" class="headerlink" title="2.3.扩展"></a><strong>2.3.扩展</strong></h3><p><strong>限定通配符的上边界</strong></p>
<p>正确：Vector&lt;? extends Number&gt; x = new Vector<integer>();<br>错误：Vector&lt;? extends Number&gt; x = new Vector<string>();<br><strong>限定通配符的下边界</strong><br>正确：Vector&lt;? super Integer&gt; x = new Vector<number>();<br>错误：Vector&lt;? super Integer&gt; x = new Vector<byte>();</byte></number></string></integer></p>
<h3 id="2-4-注意"><a href="#2-4-注意" class="headerlink" title="2.4.注意"></a><strong>2.4.注意</strong></h3><p><strong>限定通配符总是包括自己。<br>?只能用于引用泛型,不能用于赋值.</strong></p>
<pre><code>    Vector&lt;? extends Number&gt; y = new Vector&lt;Integer&gt;();
    Vector&lt;Number&gt; x = y;//虽然此时的y的确元素类型都为Integer,但是他的包装还是&lt;? extends Number&gt;,所以不行
    //相当于 Vector &lt;Number&gt; x = new Vector &lt;? extends Number &gt;();
</code></pre><p>上面的第二行代码错误，原理与Vector<object> x11 = new Vector<string>();相似，<br>这个时候只能通过强制类型转换方式来赋值。</string></object></p>
<h2 id="3-定义泛型方法"><a href="#3-定义泛型方法" class="headerlink" title="3.定义泛型方法"></a><strong>3.定义泛型方法</strong></h2><h3 id="假设需求-定义一个泛型方法"><a href="#假设需求-定义一个泛型方法" class="headerlink" title="假设需求:定义一个泛型方法"></a><strong>假设需求:定义一个泛型方法</strong></h3><p>交换数组中的两个元素的位置的泛型方法语法定义如下：<br>static <e> void swap(E[] a, int i, int j) {<br>E t = a[i];<br>a[i] = a[j];<br>a[j] = t;<br>}</e></p>
<p>//或用一个面试题讲：把一个数组中的元素的顺序颠倒一下</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a><strong>注意:</strong></h3><p><strong>a.</strong>只有引用类型才能作为泛型方法的实际参数，swap(new int[3],3,5);语句会报告编译错误。<br><strong>b.</strong>除了在应用泛型时可以使用extends限定符，在定义泛型时也可以使用extends限定符，例如，Class.getAnnotation()方法的定义。并且可以用&amp;来指定多个边界，</p>
<p>如:<v extends="" serializable="" &="" cloneable=""> void method(){}<br><strong>c.</strong>普通方法、构造方法和静态方法中都可以使用泛型。<br><strong>d.</strong>也可以用类型变量表示异常，称为参数化的异常，可以用于方法的throws列表中，但是不能用于catch子句中。<br><strong>e.</strong>在泛型中可以同时有多个类型参数，在定义它们的尖括号中用逗号分<br>例如：public static <k,v> V getValue(K key) { return map.get(key);}</k,v></v></p>
<h2 id="4-类型参数的类型推断-待理解…"><a href="#4-类型参数的类型推断-待理解…" class="headerlink" title="4.类型参数的类型推断(待理解…)"></a><strong>4.类型参数的类型推断(待理解…)</strong></h2><p><strong>编译器判断范型方法的实际类型参数的过程称为类型推断</strong>，类型推断是相对于知觉推断的，其实现方法是一种非常复杂的过程。</p>
<p>l根据调用泛型方法时实际传递的参数类型或返回值的类型来推断，具体规则如下：<br>当某个类型变量只在整个参数列表中的所有参数和返回值中的一处被应用了，那么根据调用方法时该处的实际应用类型来确定，这很容易凭着感觉推断出来，即直接根据调用方法时传递的参数类型或返回值来决定泛型参数的类型，例如：</p>
<p>swap(newString[3],3,4)   à    static <e> void swap(E[] a,int i, int j)</e></p>
<p>当某个类型变量在整个参数列表中的所有参数和返回值中的多处被应用了，如果调用方法时这多处的实际应用类型都对应同一种类型来确定，这很容易凭着感觉推断出来，例如：</p>
<p>add(3,5)   àstatic <t> T add(T a, T b)</t></p>
<p>当某个类型变量在整个参数列表中的所有参数和返回值中的多处被应用了，如果调用方法时这多处的实际应用类型对应到了不同的类型，且没有使用返回值，这时候取多个参数中的最大交集类型，例如，下面语句实际对应的类型就是Number了，编译没问题，只是运行时出问题：</p>
<p>fill(newInteger[3],3.5f)   àstatic <t> void fill(T[] a, T v)</t></p>
<p>当某个类型变量在整个参数列表中的所有参数和返回值中的多处被应用了，如果调用方法时这多处的实际应用类型对应到了不同的类型，并且使用返回值，这时候优先考虑返回值的类型，例如，下面语句实际对应的类型就是Integer了，编译将报告错误，将变量x的类型改为float，对比eclipse报告的错误提示，接着再将变量x类型改为Number，则没有了错误：</p>
<p>int x=(3,3.5f)   àstatic <t> T add(T a, T b)</t></p>
<p>参数类型的类型推断具有传递性，下面第一种情况推断实际参数类型为Object，编译没有问题，而第二种情况则根据参数化的Vector类实例将类型变量直接确定为String类型，编译将出现问题：</p>
<p>copy(new Integer[5],newString[5]) à static<t> void copy(T[] a,T[]  b);</t></p>
<p>copy(new Vector<string>(), newInteger[5]) à static<t> void copy(Collection<t> a , T[] b);</t></t></string></p>
<h2 id="5-定义泛型类型"><a href="#5-定义泛型类型" class="headerlink" title="5.定义泛型类型"></a><strong>5.定义泛型类型</strong></h2><p>如果类的实例对象中的多处都要用到同一个泛型参数，即这些地方引用的泛型类型要保持同一个实际类型时，这时候就要采用泛型类型的方式进行定义，也就是类级别的泛型，语法格式如下：</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericDao</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>
      <span class="token keyword">private</span> T field1<span class="token punctuation">;</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token keyword">public</span> T <span class="token function">getById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre>
<p>类级别的泛型是根据引用该类名时指定的类型信息来参数化类型变量的，例如，如下两种方式都可以：</p>
<p>GenericDao<string>dao =null;<br>new genericDao<string>();</string></string></p>
<p><strong>注意：</strong><br>在对泛型类型进行参数化时，类型参数的实例必须是引用类型，不能是基本类型。</p>
<p>当一个变量被声明为泛型时，只能被实例变量、方法和内部类调用，而不能被静态变量和静态方法调用。因为静态成员是被所有参数化的类所共享的，所以静态成员不应该有类级别的类型参数。<br>所以,类中只有一个方法需要使用泛型，直接使用方法级别的泛型就行了.否则代码的容错性降低了…</p>
<h2 id="6-泛型的继承"><a href="#6-泛型的继承" class="headerlink" title="6.泛型的继承"></a><strong>6.泛型的继承</strong></h2><p>继承时，对泛型父类的类型参数不实例化</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">{</span>
    ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">&lt;</span>E<span class="token operator">></span>  <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">{</span>
    ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>继承时，对泛型父类的类型参数实例化</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">{</span>
    ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">&lt;</span>F<span class="token operator">></span>  <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">{</span>
    ArrayList<span class="token operator">&lt;</span>F<span class="token operator">></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="7-通过反射获得泛型的参数化类型"><a href="#7-通过反射获得泛型的参数化类型" class="headerlink" title="7.通过反射获得泛型的参数化类型"></a><strong>7.通过反射获得泛型的参数化类型</strong></h2><p>示例代码：</p>
<pre class=" language-java"><code class="language-java">    Class <span class="token class-name">GenericalReflection</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> Vector<span class="token operator">&lt;</span>Date<span class="token operator">></span> dates <span class="token operator">=</span> newVector<span class="token operator">&lt;</span>Date<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDates</span><span class="token punctuation">(</span>Vector<span class="token operator">&lt;</span>Date<span class="token operator">></span> dates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>dates <span class="token operator">=</span> dates<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     Method methodApply <span class="token operator">=</span> GenericalReflection<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"applyGeneric"</span><span class="token punctuation">,</span> Vector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     ParameterizedType pType <span class="token operator">=</span> <span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span>
                      <span class="token punctuation">(</span>methodApply <span class="token punctuation">.</span><span class="token function">getGenericParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setDates("</span>
                      <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span> pType<span class="token punctuation">.</span><span class="token function">getRawType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;"</span>
                      <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span> <span class="token punctuation">(</span>pType<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                      <span class="token operator">+</span> <span class="token string">">)"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre>
<h2 id="8-泛型简单使用总结"><a href="#8-泛型简单使用总结" class="headerlink" title="8.泛型简单使用总结"></a><strong>8.泛型简单使用总结</strong></h2><p><strong>(张老师的了解相当深入,暂时只吸收5成…下面是我觉得在普通使用中会能够应付的简单总结)</strong></p>
<h3 id="泛型优点"><a href="#泛型优点" class="headerlink" title="泛型优点"></a><strong>泛型优点</strong></h3><p>安全–不需要强制转换–将运行阶段问题放到编译阶段解决</p>
<h3 id="参数化类型使用-赋值语句中-规律"><a href="#参数化类型使用-赋值语句中-规律" class="headerlink" title="参数化类型使用(赋值语句中)规律:"></a><strong>参数化类型使用(赋值语句中)规律:</strong></h3><p>“=”两边,同时又&lt;&gt;,则&lt;&gt;中内容必须完全相同.其他一概不考虑…</p>
<p>“=”两边,又一边出现泛型,随意.(但有个特例:数组的泛型定义,只能将&lt;&gt;放在声明上,就是左边)</p>
<h3 id="在类上定义泛型"><a href="#在类上定义泛型" class="headerlink" title="在类上定义泛型"></a><strong>在类上定义泛型</strong></h3><p>在类上定义了一个泛型,对于在类上定义的泛型，我们在整个类内都可以使用.可以在方法上，可以在属性上，但是不能在静态方法中应用。</p>
<h3 id="在方法上定义泛型"><a href="#在方法上定义泛型" class="headerlink" title="在方法上定义泛型"></a><strong>在方法上定义泛型</strong></h3><p>在任意的方法上都能声明泛型，但是泛型必须加在方法的返回值前。</p>
<h3 id="泛型中的通配符使用"><a href="#泛型中的通配符使用" class="headerlink" title="泛型中的通配符使用"></a><strong>泛型中的通配符使用</strong></h3><p>? extends E  它代表的是E类型或E的子类<br>这个在Collection接口中的addAll(Collection&lt;? extends E&gt; c)<br>? super E    它代表的是E类型或E的父类</p>
<h3 id="泛型的擦除属性"><a href="#泛型的擦除属性" class="headerlink" title="泛型的擦除属性"></a><strong>泛型的擦除属性</strong></h3><p>泛型只是在编译阶段有效果，当运行后它就失去作用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;(部分内容,知其然,不知其所以然,先记下,慢慢品)&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;题外话:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开始学习张孝祥老师的基础加强视频,发现,自以为学的不错,其实就像只是用300cc的瓶子去接了250cc的水.倘若倒入1000cc的瓶子中,一下就觉得空荡荡了.&lt;br&gt;学习过程是给300cc瓶子灌水的过程.灌水的过程固然重要,适当的升级瓶子更是必不可少.感谢张孝祥老师.&lt;/p&gt;
&lt;p&gt;再次缅怀已逝的张孝祥老师.&lt;/p&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="基础视频" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80%E8%A7%86%E9%A2%91/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="笔记" scheme="http://gaoll.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="教程" scheme="http://gaoll.top/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-简单网络编程总结</title>
    <link href="http://gaoll.top/2014/01/11/%E7%AE%80%E5%8D%95%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://gaoll.top/2014/01/11/简单网络编程总结/</id>
    <published>2014-01-11T06:19:00.000Z</published>
    <updated>2017-08-24T07:55:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题外话:</strong>其实原本感觉网络编程和IO流结合,有些小迷糊.但是再在硬着头皮装B给别人答疑时,自己把自己给捋顺了…所以,装B也是一种高效学习法…</p>
<h2 id="1-网络编程概述"><a href="#1-网络编程概述" class="headerlink" title="1.网络编程概述"></a>1.网络编程概述</h2><h3 id="1-1-概念："><a href="#1-1-概念：" class="headerlink" title="1.1.概念："></a>1.1.概念：</h3><p>通过编程语言实现计算机键的数据通信。</p>
<a id="more"></a>
<h3 id="1-2-网络编程的三要素："><a href="#1-2-网络编程的三要素：" class="headerlink" title="1.2.网络编程的三要素："></a>1.2.网络编程的三要素：</h3><p><strong>A:Ip地址</strong>:</p>
<p>是计算机的唯一标识点分十进制。IP地址的分类。IP地址的组成。ipconfig  ping<br><strong>B:端口</strong><br><strong>物理端口</strong>：网线插口,亲…</p>
<p><strong>逻辑端口</strong>：用于标识进程的逻辑地址,不同进程的标识;有效端口：0~65535,其中0~1024系统使用或保留端口.<br>范围：0-65535(0-1024之间一般系统被占用.)<br><strong>C:协议:</strong>是定义的通信规则</p>
<p><strong>UDP</strong>(面向无连接):将数据源和目的封装成数据包中，不需要建立连接；每个数据报的大小在限制在64k；因无连接，是不可靠协议；不需要建立连接，速度快.</p>
<p><strong>TCP</strong>(面向连接): 建立连接，形成传输数据的通道；在连接中进行大数据量传输；通过三次握手完成连接，是可靠协议；必须建立连接，效率会稍低</p>
<p><strong>注:关于InetAddress类的使用:(最需要记的就下面这个代码:)</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">IPDemo</span><span class="token punctuation">{</span>
       publicstatic <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnknownHostException<span class="token punctuation">{</span>
              <span class="token comment" spellcheck="true">//通过名称(ip字符串or主机名)来获取一个ip对象。</span>
              InetAddressip <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//java.net.UnknownHostException</span>
              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"addr:"</span><span class="token operator">+</span>ip<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token operator">+</span>ip<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="2-UDP协议传输"><a href="#2-UDP协议传输" class="headerlink" title="2.UDP协议传输"></a>2.UDP协议传输</h2><h3 id="2-1-DatagramSocket和DatagramPacket"><a href="#2-1-DatagramSocket和DatagramPacket" class="headerlink" title="2.1.DatagramSocket和DatagramPacket:"></a>2.1.DatagramSocket和DatagramPacket:</h3><p>只要是网络传输,必须有socket .数据一定要封装到数据包中,数据包中包括目的地址,端口,数据等信息.</p>
<p><strong>DatagramSocket:</strong><br>直接操作udp不可能，对于java语言应该将udp封装成对象，易于我们的使用，这个对象就是DatagramSocket. 封装了udp传输协议的socket对象。<br>DatagramSocket具备发送和接受功能，在进行udp传输时，需要明确一个是发送端，一个是接收端。</p>
<p><strong>DatagramPacket:</strong><br>因为数据包中包含的信息较多，为了操作这些信息方便，也一样会将其封装成对象。这个数据包对象就是：DatagramPacket.通过这个对象中的方法，就可以获取到数据包中的各种信息。</p>
<h3 id="2-2-代码体现-学习过程"><a href="#2-2-代码体现-学习过程" class="headerlink" title="2.2.代码体现,学习过程:"></a>2.2.代码体现,学习过程:</h3><p><strong>发送端:</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*
操作步骤:
1. 创建udp socket ,建立端点.(指定监视的端点)
2.    定义数据包(字节数组),并通过receive方法接收数据包.
3.通过数据包的方法,获取其中的数据.
4.将信息反馈给控制台.
5.读到结束符,886则读取结束.关闭资源.
*/</span>

<span class="token comment" spellcheck="true">//创建接收端类</span>
<span class="token keyword">class</span> <span class="token class-name">ReceiveDemo</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//创建发送端Socket服务对象,这里指定了端口,要监视特定端口传递来的数据</span>
        DatagramSocket ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">19999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//定义用于接收数据包的字节数组</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        DatagramPacket dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>rec<span class="token punctuation">,</span>rec<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建数据包.</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            InetAddress address <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String ip <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rec2 <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> length <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>rec2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里之所以要强调数据的长度,是因为传递是一个完整的1024字节的包.没有信息的用空格补齐了.</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"886"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address <span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span> ip <span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>接收端:</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*
步骤:
1.创建udp服务,通过DatagramSocket对象.
2.确定数据源,并进行封装,封装成数据包.
3.通过socket服务,将已有的数据包发送出去,通过send方法.
4.关闭已经打开的资源.
*/</span>
<span class="token comment" spellcheck="true">//创建接收端类:</span>
<span class="token keyword">class</span> <span class="token class-name">SendDemo</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            DatagramSocket ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String line <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
                DatagramPacket dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span>InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.3.255"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">19999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="3-TCP传输"><a href="#3-TCP传输" class="headerlink" title="3.TCP传输"></a>3.TCP传输</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1.概述:"></a>3.1.概述:</h3><p>两个端点的建立连接后会有一个传输数据的通道，这通道称为流，而且是建立在网络基础上的流，称之为socket流。该流中既有读取，也有写入。<br><strong>tcp的两个端点</strong>：一个是客户端，一个是服务端。<br><strong>客户端</strong>：对应的对象，Socket<br><strong>服务端</strong>：对应的对象，ServerSocket</p>
<h3 id="3-2-代码体现-学习过程"><a href="#3-2-代码体现-学习过程" class="headerlink" title="3.2.代码体现,学习过程"></a>3.2.代码体现,学习过程</h3><p><strong>服务器端:</strong></p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*
需求:
练习使用TCP传输方法传输数据
TCP服务器步骤:
    1.创建服务器端的Socket对象.
    2.设置一个监听,用来监听连接.(保证客户端可以进行连接)
    3.Socket流中获取输入流,输出流,进行数据传输.
    4.释放资源.
TCP客户端步骤:
    1.创建客户端的Socket对象.
    2.建立与服务器连接,
    3.从Socket流中获取输入输出流,进行数据传输.
    4.释放资源.
*/</span>


<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>*<span class="token punctuation">;</span>


<span class="token comment" spellcheck="true">//建立TCP服务器端</span>
<span class="token keyword">class</span> <span class="token class-name">TCPServer</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//建立服务器端的socket服务.</span>
        ServerSocket ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">19999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//此时为阻塞状态,等待获取客户端的连接.</span>
        Socket s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//只有上一步得到了该客户端的连接对象才能进下一步.</span>
        InetAddress address <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String ip <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address<span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>ip<span class="token operator">+</span><span class="token string">"连接中---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//通过从Socket流中获取输入输出流,可以进行数据传输.</span>
        <span class="token comment" spellcheck="true">//读取流中的客户端的socket对象的输入输出流.</span>
        BufferedInputStream br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferedOutputStream bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"abcCopy.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferedWriter bw2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">//拿到输入输出流进行数据操作.</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">//发送反馈信息</span>
        bw2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"数据成功接收"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bw2<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bw2<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//br.close();</span>
        <span class="token comment" spellcheck="true">//s.close();</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>客户端:</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
需求:
练习TCP客户端的搭建使用
*/</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>*<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//搭建TCP数据传输的客户端</span>
<span class="token keyword">class</span> <span class="token class-name">TCPClient</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//建立客户端的Socket对象.</span>
        Socket s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">19999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//为Socket套接字中投入一个输入流(要不然不是一个源都没有,他怎么形成流?可以是键盘输入,可以是读取问文件等等)</span>
         BufferedInputStream br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"abc.gif"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//获得该Socket套接字的输入输出流(两边的互通交流in对应out,out对应in)</span>
        BufferedOutputStream bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferedReader brServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>    s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">////获得流对象,进行数据操作.</span>
        <span class="token comment" spellcheck="true">//int ch = 0;</span>
        <span class="token comment" spellcheck="true">//while((ch=bis.read())!=-1){</span>
            <span class="token comment" spellcheck="true">//bos.write(ch);</span>
        <span class="token comment" spellcheck="true">//}</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//获得服务器的反馈信息.</span>
        String server <span class="token operator">=</span> brServer<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//阻塞</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server:"</span> <span class="token operator">+</span> server<span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="4-关于套接字"><a href="#4-关于套接字" class="headerlink" title="4.关于套接字"></a>4.关于套接字</h2><p>一直以为套接字,套接流就是一种管道流.</p>
<p>后来才发现两个是两码事.但我还是觉得,套接字的表现形式很像管道流:</p>
<p>Socket服务器的连接动作,就像是封装了管道流的in,out对接的两个动作.</p>
<p>Socket中的getINput(Output)就像是管道流中的Input(Output).</p>
<p>彼端的in,对应此端的out;此端的in,对应笔端的out…</p>
<p>相当的神似…可能就是一种互通思想的多态表现形式吧…..</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题外话:&lt;/strong&gt;其实原本感觉网络编程和IO流结合,有些小迷糊.但是再在硬着头皮装B给别人答疑时,自己把自己给捋顺了…所以,装B也是一种高效学习法…&lt;/p&gt;
&lt;h2 id=&quot;1-网络编程概述&quot;&gt;&lt;a href=&quot;#1-网络编程概述&quot; class=&quot;headerlink&quot; title=&quot;1.网络编程概述&quot;&gt;&lt;/a&gt;1.网络编程概述&lt;/h2&gt;&lt;h3 id=&quot;1-1-概念：&quot;&gt;&lt;a href=&quot;#1-1-概念：&quot; class=&quot;headerlink&quot; title=&quot;1.1.概念：&quot;&gt;&lt;/a&gt;1.1.概念：&lt;/h3&gt;&lt;p&gt;通过编程语言实现计算机键的数据通信。&lt;/p&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="笔记" scheme="http://gaoll.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JAVA" scheme="http://gaoll.top/tags/JAVA/"/>
    
      <category term="思路" scheme="http://gaoll.top/tags/%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-重要代码记录Part2(持续跟新)</title>
    <link href="http://gaoll.top/2014/01/10/%E9%87%8D%E8%A6%81%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95Part2(%E6%8C%81%E7%BB%AD%E8%B7%9F%E6%96%B0)/"/>
    <id>http://gaoll.top/2014/01/10/重要代码记录Part2(持续跟新)/</id>
    <published>2014-01-09T19:39:00.000Z</published>
    <updated>2017-08-24T08:20:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>黑马程序员-重要代码记录<br>(原打算一个帖子收集,发现多了就不方便回顾,特另开)<br><a id="more"></a></p>
<h1 id="1-关于猫狗鱼问题的思路"><a href="#1-关于猫狗鱼问题的思路" class="headerlink" title="1.关于猫狗鱼问题的思路"></a>1.关于猫狗鱼问题的思路</h1><p>我的代码:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cross_new</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//开始过河.</span>
        <span class="token function">doTransport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doTransport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 抽象出猫,鱼,狗和两岸.</span>
        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arr1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arr1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"猫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arr1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 农夫将要携带到船上动物.(前一字符表示农夫当前携带动物,后一字符表示上次农夫携带的动物,为了让农夫不出现重复拿同一个动物的情况)</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"农夫,猫,鱼,狗都在此岸,开始过河.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String boat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">move</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> boat<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n农夫,猫,鱼,狗都到达彼岸."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> arr1<span class="token punctuation">,</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> arr2<span class="token punctuation">,</span>String boat<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//农夫船上是否有动物,有则不需随机选择携带.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>boat<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> one<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 农夫从此岸随机带上一个动物.</span>
                one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token operator">==</span>boat<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            boat <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token operator">+</span>boat<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            arr1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 判断此岸是否和谐</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ifNice</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 此岸和谐,农夫则将动物送去彼岸.</span>
            arr2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>boat<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--->农夫带"</span> <span class="token operator">+</span> boat<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"去彼岸    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//首先判断是否将三个动物都放彼岸,是则无需判断是否和谐.</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 判断彼岸是否和谐.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ifNice</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 彼岸和谐,农夫则完成此次运送.</span>
                boat<span class="token operator">=</span><span class="token string">"-"</span><span class="token operator">+</span>boat<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"    农夫单独回此岸&lt;---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 彼岸不和谐,农夫则将岸上动物与携带动物交换.送回此岸.</span>
                boat<span class="token operator">=</span>arr2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>boat<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"    农夫带"</span> <span class="token operator">+</span>boat<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"回此岸&lt;---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                arr2<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                arr1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>boat<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                boat<span class="token operator">=</span><span class="token string">"-"</span><span class="token operator">+</span>boat<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 如果此岸不和谐则放回此岸.</span>
            arr1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>boat<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            boat<span class="token operator">=</span><span class="token string">"-"</span><span class="token operator">+</span>boat<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">ifNice</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 判断是能否共存.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"猫"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"狗"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token operator">||</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"鱼"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"猫"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>朋友的代码:</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test10_1</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 首先创建三个对象</span>
        Animal cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Animal dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Animal fish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token string">"fish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 定义两个链表存放对象</span>
        LinkedList<span class="token operator">&lt;</span>Animal<span class="token operator">></span> beforeCrossing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Animal<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LinkedList<span class="token operator">&lt;</span>Animal<span class="token operator">></span> afterCrossing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Animal<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        beforeCrossing<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>
        beforeCrossing<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>
        beforeCrossing<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fish<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>beforeCrossing<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 从beforeCrossing取出一个Animal</span>
            Animal ani <span class="token operator">=</span> beforeCrossing<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 如果剩下两个Animal，看看剩下的Animal能否和平共处</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>beforeCrossing<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>beforeCrossing<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">friendlyWith</span><span class="token punctuation">(</span>beforeCrossing<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 如果能合同共处，把取出的动物送到afterCrossing</span>
                    afterCrossing<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>ani<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ani<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被送到对岸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 如果剩下的动物不能和平共处，则把取出的Animal再次插入beforeCrossing</span>
                    beforeCrossing<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>ani<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 否则先把动物送到对岸</span>
                afterCrossing<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>ani<span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ani<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被送到对岸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 再判断对岸的Animal能否和平共处</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>afterCrossing<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 如果不能和平共处，则把对岸的原先的动物给送回来</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>afterCrossing<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">friendlyWith</span><span class="token punctuation">(</span>afterCrossing<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        ani <span class="token operator">=</span> afterCrossing<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        beforeCrossing<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>ani<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ani<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被送了回来"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">friendlyWith</span><span class="token punctuation">(</span>Animal ani<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">friendlyWith</span><span class="token punctuation">(</span>Animal ani<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ani<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Dog"</span><span class="token punctuation">)</span>
                <span class="token operator">||</span> ani<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Fish"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">friendlyWith</span><span class="token punctuation">(</span>Animal ani<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ani<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Fish</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token function">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Fish</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">friendlyWith</span><span class="token punctuation">(</span>Animal ani<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ani<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>这道题是从黑马基础题上看到的,刚开始以为没什么知识点,纯if判断就ok.后来才发现,可以很有知识点,<br>1.我再上面放出的第一个代码是我的思路.第二个是以朋友的思路.</p>
<p>我的代码在一开始,就没有我朋友的那种相当浓烈的面向对象思想.他将猫狗鱼都封装成了类,继承动物类,有方法Friendly.对于Java的面向对象思想来说,貌似很切合.<br>我的代码思路就是抽象了两岸,小船,用集合和String[]抽象了他们,并将动物抽象为了字符数组中的字符.虽然,我自认为自己的方法看起来更简单,但是不得不承认,思想上,败给了朋友的代码.</p>
<p>所以,我觉得Java前期的学习,必须注重思维的培养,培养面向对象的思想,深化封装,继承,多态的思维模式.<br>有了思想,语言基础都是可以用时间补上的….</p>
<hr>
<h1 id="2-按字节为截取字符代码引发的思考"><a href="#2-按字节为截取字符代码引发的思考" class="headerlink" title="2.按字节为截取字符代码引发的思考"></a>2.按字节为截取字符代码引发的思考</h1><p><strong>我的代码:</strong></p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*
 * 需求:
 * 编写函数，从一个字符串中按字节数截取一部分，但不能截取出半个中文（GBK码表）
 * 例如：从“HM程序员”中截取2个字节是“HM”，截取4个则是“HM程”，截取3个字节也要是"HM"而不要出现半个中文.
 * 
 * 思路:
 * 字符串的字节文件表示中,英文字母为一个byte型数据表示,而汉子为两个byte数据表示.
 * 对给定的一个字符串,用toCharArray()和getByte()方法分别转换为字符,字节数组.
 * 如果是字母,则对应数组中元素的数值应该是相等的,否则不等,且为字节数组中两个元素对应字符数组中一个元素.
 * 
 * 步骤:
 * 1.键盘录入一个字符串对象.
 * 2.转换并接受用String类中方法得到的字符数组与字节数组.
 * 3.键盘接收需要截取字符串的字节数.
 * 4.以字节数组元素来判定截取字节数,以与字符串数组元素的对比判断是否该将对应字符截取.
 * 5.打印出截取后字符串.
 * */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test10</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入需要截取的字符串:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String str <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">subPartOfString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义方法,按需求截取字符串中对应字节字符串.</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">subPartOfString</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入需要截取字节数:(数字)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> byteArr<span class="token punctuation">.</span>length <span class="token operator">||</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的截取字节数有误,请重新输入."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i用于控制截取字节数,即循环增量;j为截取后字符数.</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>charArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> byteArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果当前字节位为字母,则加入截取后字符串.</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果当前字节为汉子,则占两个字节,当且仅当截取了两个字节才将该字符加入截取后字符串.</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                j <span class="token operator">+=</span> count <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"截取后新字符串为:\n"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>charArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>张孝祥老师的方法代码:</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TEST</span><span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
            String str <span class="token operator">=</span> <span class="token string">"我a爱中华abc我爱传智def"</span><span class="token punctuation">;</span>
            String str <span class="token operator">=</span> <span class="token string">"我ABC汉"</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">trimGBK</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span>  <span class="token function">trimGBK</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> bChineseFirstHalf <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bChineseFirstHalf<span class="token punctuation">)</span><span class="token punctuation">{</span>
                bChineseFirstHalf <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                num<span class="token operator">++</span><span class="token punctuation">;</span>
                bChineseFirstHalf <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                      
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>总结:</p>
<p>在这里,先对已逝的张孝祥老师报以有种的感谢…您一路走好.<br>这道题,也是从黑马入学基础题目中侬到的题目.在自己解决的时候,对如何判断是否截取这个占用了两个字节的一个汉子字符相当繁琐,多定义了两个集合,多用了几个循环增量.在看张孝祥老师的就业面试宝典时,突然发现,这道题老师的代码,很好.</p>
<p>我是这么顺着老师的代码走的思路:<br>1.方法定义中的参数列表为:一个由目标字符串转换成的字节数组,截取的字节数.</p>
<p>2.方法中,在循环截取的代码外,定义了截取长度的初始值0 ,一个判断是否为中文字符的布尔变量.for循环的判断中,用字节数据是否为负数 (汉子由两个负的字节数据组成)和是否截取过1个字符的前一个字节.</p>
<ol>
<li>在循环体结束(两处,if和else)中分别对该辅助判断的布尔变量进行新的赋值 .</li>
</ol>
<p>4.返回该结果.<br>事实上,我自己的代码中思路何老师差不多,但是没能思路明了的用一个布尔型变量来接收.实际上就是封装了我代码中的循环增量判断和赋值.其实想想也是,当循环增量是以模2为判断辅助条件,用false,或true,完全可以既简便由明了的替代这个循环增量.</p>
<p>总之,学习老师等高手的思想,思路,路还很长…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;黑马程序员-重要代码记录&lt;br&gt;(原打算一个帖子收集,发现多了就不方便回顾,特另开)&lt;br&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="JAVA" scheme="http://gaoll.top/tags/JAVA/"/>
    
      <category term="思路" scheme="http://gaoll.top/tags/%E6%80%9D%E8%B7%AF/"/>
    
      <category term="代码" scheme="http://gaoll.top/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-IO总结</title>
    <link href="http://gaoll.top/2014/01/10/IO%E6%80%BB%E7%BB%93/"/>
    <id>http://gaoll.top/2014/01/10/IO总结/</id>
    <published>2014-01-09T16:02:00.000Z</published>
    <updated>2017-08-24T08:22:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题外话:</strong><br><strong>这近十天来.为了赶进度,越来越发现自己没有花多少时间去总结回顾之前的知识了.突然发现IO流已经学习完几天了.竟然一次也没复习过.甚至于提到IO某些知识都有种莫名的陌生感.</strong> 的确时间不等人,但是某些必要的时间还是得划出来.更不能因为周边某些人的急功近利,反而乱了自己的节奏.</p>
<hr>
<p><strong>不断的戒掉旧习,却又不断的有新的恶习.</strong></p>
<p><strong>想优秀,要努力.</strong></p>
<hr>
<a id="more"></a>
<h2 id="1-I-O概述"><a href="#1-I-O概述" class="headerlink" title="1.I/O概述"></a>1.I/O概述</h2><h3 id="1-1-I-O系统"><a href="#1-1-I-O系统" class="headerlink" title="1.1.I/O系统"></a>1.1.I/O系统</h3><p>顾名思义:输入/输出系统.</p>
<p>I/O之所以公认最重要,就是因为作为输入输出,就是输入输出的源端和想要与之通信的接收端(对应Input,Output)存在各种形式.而且还需要考虑各种不同的数据类型作为源和接收端之间的数据能否互通问题.</p>
<h2 id="2-准备工作-File类"><a href="#2-准备工作-File类" class="headerlink" title="2.准备工作-File类"></a>2.准备工作-File类</h2><h3 id="2-1-File类的概念"><a href="#2-1-File类的概念" class="headerlink" title="2.1.File类的概念"></a>2.1.File类的概念</h3><p>一个实用类库工具,用于帮助处理文件内部数据外的文件,文件夹,路径等属性.</p>
<p>其实就是将文件系统中的文件和文件夹封装成了对象.提供了更多的属性和行为可以对这些文件和文件夹进行操作.这些是流对象办不到的,因为流只操作数据.</p>
<h3 id="2-2-File类的常用构造和方法"><a href="#2-2-File类的常用构造和方法" class="headerlink" title="2.2.File类的常用构造和方法"></a>2.2.File类的常用构造和方法</h3><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p><strong><img src="http://img.blog.csdn.net/20140102225849875?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<p><strong><img src="http://img.blog.csdn.net/20140102225905296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></strong></p>
<p>(更新下,今天用到了一个相当常用,当时学习File没有写进去,罪过)<br><strong>重命名</strong></p>
<p><strong>boolean</strong> f1.renameTo(Filedest);//可以实现移动的效果.剪切+重命名.</p>
<p><strong>注意:</strong></p>
<p><strong>这里的renameTo()方法,改变了需要改变的文件夹后,他的f1封装的还是以前未改的路径,就不是在指向改后的文件或文件夹了!!!</strong></p>
<p><strong>我</strong>在这里栽了很蛋疼的跟头.谨记.!!</p>
<h3 id="2-3-案例"><a href="#2-3-案例" class="headerlink" title="2.3.案例"></a>2.3.案例</h3><p>这里最经典就是用递归思想操作一个目标文件下,包括子文件的所有文件及文件夹.<br>我的代码:</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * 需求:
 * 编写程序，将指定目录下所有.java文件拷贝到另一个目的中，并将扩展名改为.txt
 * 
 * 思路:
 * 封装原始与目的路径对象,利用递归的方式获取原始目录下java文件路径对象.
 * 然后每当获取到java文件路径对象,通过IO流中的字符流在目的路径创建java文件对应txt文件进行复制.
 * 
 * 步骤:
 * 1.键盘录入初始目录路径,目标目录路径,并进行封装.
 * 2.自定义复制java文件方法,按需求,复制.java文件并改后缀名为.txt.
 * 3.自定义遍历方法,利用递归的方式,获取初始目录下所有java文件路径对象.
 * 4.每当获取到java文件路径对象,调用自定义复制方法,进行复制.
 * 5.反馈操作是否成功.
 * */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test9</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        Scanner in <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您将进行如下操作:\n\t将指定目录下所有.java文件拷贝到另一个目的中，并将扩展名改为.txt\n请输入初始路径:\t(例如:D:/itheima/javaCode)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String fromStr<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入目标路径:\t(例如:E:/itheima/txtCode)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String targetStr<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//封装初始路径,目标路径.</span>
        File from<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fromStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        File target<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>targetStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//判断目标路径是否存在,否则创建.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标路径不存在,自动创建."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            target<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//调用方法,复制重命名文件.</span>
        <span class="token function">copyAll</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拷贝并重命名操作成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义遍历方法,用递归方式遍历目录下所有java文件,并调用自定义复制方法进行复制.</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyAll</span><span class="token punctuation">(</span>File from<span class="token punctuation">,</span>File target<span class="token punctuation">)</span><span class="token punctuation">{</span>
        File<span class="token punctuation">[</span><span class="token punctuation">]</span> fileList<span class="token operator">=</span>from<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>File temp <span class="token operator">:</span> fileList<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果该路径对象是文件夹,则递归.</span>
                File targetTemp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>temp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                targetTemp<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">copyAll</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>targetTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果该路径对象是文件,判断是否为java文件,是则调用方法,自定义复制.</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token function">myCopy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义复制java文件方法,包括将文件后缀改为txt操作.</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">myCopy</span><span class="token punctuation">(</span>File from<span class="token punctuation">,</span>File target<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        File targetFile<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>from<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">,</span> <span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改复制后文件后缀为txt.</span>
        BufferedReader br<span class="token operator">=</span>null<span class="token punctuation">;</span>
        BufferedWriter bw<span class="token operator">=</span>null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            br<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bw<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>targetFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String temp<span class="token operator">=</span>null<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>temp<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//运用字符缓冲流,复制java文件进入目标路径下同名txt文件.</span>
                bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//关闭资源.</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>bw<span class="token operator">!=</span>null<span class="token punctuation">)</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">finally</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>br<span class="token operator">!=</span>null<span class="token punctuation">)</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<hr>
<h2 id="3-IO流体系"><a href="#3-IO流体系" class="headerlink" title="3.IO流体系"></a><strong>3.IO流体系</strong></h2><h3 id="3-1-IO流分类"><a href="#3-1-IO流分类" class="headerlink" title="3.1.IO流分类"></a>3.1.IO流分类</h3><p><strong>流的概念</strong>:可以理解数据的流动,就是一个数据流.IO流最终要以对象来体现.对象都存在IO包中.</p>
<p>流的分类两种依据<br><strong>处理方式不同</strong>:分为输入流(读)和输出流(写).</p>
<p><strong>处理的数据不同</strong>:分为字节流和字符流.(下面是四大基类)<br><strong>字节流：InputStream  OutputStream</strong></p>
<p><strong>字符流：Reader  Writer</strong></p>
<p><strong>字节流:</strong></p>
<p>处理字节数据的流对象。设备上的数据无论是图片或者dvd，文字，它们都以二进制存储的。二进制的最终都是以一个8位为数据单元进行体现，所以计算机中的最小数据单元就是字节。意味着，字节流可以处理设备上的所有数据，所以字节流一样可以处理字符数据。</p>
<p><strong>字符流:</strong></p>
<p>因为字符每个国家都不一样，所以涉及到了字符编码问题，那么GBK编码的中文用unicode编码解析是有问题的，所以需要获取中文字节数据的同时+ 指定的编码表才可以解析正确数据。为了方便于文字的解析，所以将字节流和编码表封装成对象，这个对象就是<strong>字符流</strong>。只要操作字符数据，优先考虑使用字符流体系。</p>
<h3 id="3-2-字符流："><a href="#3-2-字符流：" class="headerlink" title="3.2.字符流："></a><strong>3.2.字符流：</strong></h3><p><strong>Reader：</strong>用于读取字符流的抽象类。子类必须实现的方法只有 read(char[], int, int) 和 close()。</p>
<p>|—BufferedReader：从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。可以指定缓冲区的大小，或者可使用默认的大小。大多数情况下，默认值就足够大了。</p>
<p>|—InputStreamReader：是字节流通向字符流的桥梁：它使用指定的字符集读取字节并将其解码为字符。它使用的字符集可以由名称指定或显式给定，或者可以接受平台默认的字符集。</p>
<p>|—FileReader：用来读取字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是适当的。要自己指定这些值，可以先在 FileInputStream 上构造一个 InputStreamReader。</p>
<p><strong>Writer：</strong>写入字符流的抽象类。子类必须实现的方法仅有 write(char[], int, int)、flush() 和 close()。</p>
<p>|—BufferedWriter：将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。</p>
<p>|—OutputStreamWriter：是字符流通向字节流的桥梁：可使用指定的字符集将要写入流中的字符编码成字节。它使用的字符集可以由名称指定或显式给定，否则将接受平台默认的字符集。</p>
<p>|—FileWriter：用来写入字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是可接受的。要自己指定这些值，可以先在 FileOutputStream 上构造一个 OutputStreamWriter。</p>
<p>|—PrintWriter：字符打印流.</p>
<h3 id="3-3-字节流"><a href="#3-3-字节流" class="headerlink" title="3.3.字节流"></a><strong>3.3.字节流</strong></h3><p><strong>InputStream：是表示字节输入流的所有类的超类。</strong></p>
<p>|— FileInputStream：从文件系统中的某个文件中获得输入字节。哪些文件可用取决于主机环境。FileInputStream 用于读取诸如图像数据之类的原始字节流。要读取字符流，请考虑使用 FileReader。</p>
<p>|— BufferedInputStream：该类实现缓冲的字节输入流。</p>
<p>|— ObjectInputStream：用于序列化的操作流.将对象存入字节文件中进行存储或者传输.</p>
<p>|— PipedInputStream：管道流.</p>
<p><strong>OutputStream：此抽象类是表示输出字节流的所有类的超类。</strong></p>
<p>|— FileOutputStream：文件输出流是用于将数据写入</p>
<p>File<br>或</p>
<p>FileDescriptor<br>的输出流。</p>
<p>|— FilterOutputStream：此类是过滤输出流的所有类的超类。</p>
<p>|— BufferedOutputStream：该类实现缓冲的输出流。</p>
<p>|— PrintStream：字节打印流.</p>
<p>|— ObjectOutputStream：用于反序列化的操作流.将存入文件中的对象数据读取出来获得该对象实例.</p>
<p>|— PipedOutputStream：管道输出流.</p>
<h3 id="3-4-流的操作规律："><a href="#3-4-流的操作规律：" class="headerlink" title="3.4.流的操作规律："></a><strong>3.4.流的操作规律：</strong></h3><p><strong>1，明确源和目的。</strong></p>
<p>数据源：就是需要读取，可以使用两个体系：InputStream、Reader；</p>
<p>数据汇：就是需要写入，可以使用两个体系：OutputStream、Writer；</p>
<p><strong>2，操作的数据是否是纯文本数据？</strong></p>
<p>如果是：数据源：Reader</p>
<p>数据汇：Writer</p>
<p>如果不是：数据源：InputStream</p>
<p>数据汇：OutputStream</p>
<p><strong>3，虽然确定了一个体系，但是该体系中有太多的对象，到底用哪个呢？</strong></p>
<p>明确操作的数据设备。</p>
<p>数据源对应的设备：硬盘(File)，内存(数组)，键盘(System.in)</p>
<p>数据汇对应的设备：硬盘(File)，内存(数组)，控制台(System.out)。</p>
<p><strong>4，需要在基本操作上附加其他功能吗？</strong>比如缓冲。</p>
<p>如果需要就进行装饰。</p>
<h2 id="4-缓冲区-或者叫高效流"><a href="#4-缓冲区-或者叫高效流" class="headerlink" title="4.缓冲区(或者叫高效流)"></a>4.缓冲区(或者叫高效流)</h2><h3 id="4-1-理解原理"><a href="#4-1-理解原理" class="headerlink" title="4.1.理解原理"></a>4.1.理解原理</h3><p>缓冲区其实就是底层用数组,将需要读取的数据进行缓存,当达到一定量后进行写入或者读取.</p>
<p>说白了就是读一大片,写一大片.</p>
<h3 id="4-2-模拟自定义BufferedReader"><a href="#4-2-模拟自定义BufferedReader" class="headerlink" title="4.2.模拟自定义BufferedReader"></a>4.2.模拟自定义BufferedReader</h3><p><strong>(BufferedInputStream等其他高效流类似)</strong></p>
<p>我的代码:</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
需求:
利用装饰设计模式,模仿jvm底层实现BufferedReader或者BufferedWriter的方式,自定义读写缓冲区.
思路:
缓冲区其实就是对默认的字符输入输出流(FileReader和FileWriter)字节输入输出流进行功能修饰.
用到了装饰设计模式.
步骤:
1.自定义方法,参数列表为需要的输入或者输出流.
2.将作为参数传递的输入输出流Read或者Writer方法进行缓冲区功能性加强.
3.封装自定义方法类.作为自定义缓冲区类.
*/</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyBufferedReader</span><span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">//为了让整个类都能调用fr的方法进行装饰.</span>
    <span class="token keyword">private</span> FileReader fr<span class="token punctuation">;</span>

    <span class="token function">MyBufferedReader</span><span class="token punctuation">(</span>FileReader fr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//让该类一旦实例化,必然存在一个FileReader对象.</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fr <span class="token operator">=</span> fr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义读取一行的方法.</span>
    <span class="token keyword">public</span> String <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>
        <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        StringBuilder line<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">=</span>fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">=</span>fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//同时遇到</span>
                    <span class="token keyword">return</span> line<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//                line.append('\r');    //如果单单遇到\r而不是\r\n,就把\r放进读取的字符串中.    </span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            line<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当读到结尾,line中还存在数据的话,就返回这些数据.</span>
            <span class="token keyword">return</span> line<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义关闭资源方法.</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>
        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyBufferedReaderTest</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>
        MyBufferedReader mbr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"abc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String line <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>mbr<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        mbr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="4-3-注意"><a href="#4-3-注意" class="headerlink" title="4.3.注意:"></a>4.3.注意:</h3><p>字符流的缓冲流中提供了readLine()和newLine()方法.</p>
<p>而字节流的缓冲流中没有提供.需要注意.</p>
<h2 id="5-转换流"><a href="#5-转换流" class="headerlink" title="5.转换流"></a>5.转换流</h2><h3 id="5-1-转换流概念"><a href="#5-1-转换流概念" class="headerlink" title="5.1.转换流概念"></a>5.1.转换流概念</h3><p><strong>转换流特有功能：</strong>转换流可以将字节转成字符，原因在于，将获取到的字节通过查编码表获取到指定对应字符。</p>
<p><strong>转换流最重要的内容就是:</strong>字节流 + 编码表 —&gt;字符流.事实上,没有转换流，就没有字符流。</p>
<pre><code>InputStreamReader-----------&gt;底层为字节流

|--FileReader-------------------&gt;我们应用为字符流

OutputStreamWriter----------&gt;底层为字节流

|--FileWrier---------------------&gt;我们应用为字符流
所以, 想要操作文本文件,必须要进行编码转换,而编码转换动作转换流都完成了.所以操作文件的流对象只要继承自转换流就可以读取一个字符了.

但是子类有一个局限性，就是子类中使用的编码是固定的，是本机默认的编码表，对于简体中文版的系统默认码表是GBK。

**FileReaderfr = new FileReader(&quot;a.txt&quot;);    等同于    ****InputStreamReaderisr = new InputStreamReader(newFileInputStream(&quot;a.txt&quot;),&quot;gbk&quot;);**

如果仅仅使用平台默认码表，就可以直接使用**:********FileReader fr = new FileReader(&quot;a.txt&quot;); **

如果需要制定码表,必须用转换流.

转换流 = 字节流+编码表.

转换流的子类File = 字节流 + 默认编码表(GBK).
</code></pre><h3 id="5-2-代码实例"><a href="#5-2-代码实例" class="headerlink" title="5.2.代码实例:"></a>5.2.代码实例:</h3><pre class=" language-java"><code class="language-java">    案例：
        <span class="token comment" spellcheck="true">//键盘录入数据</span>
        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferddWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        String line <span class="token operator">=</span> null
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//把文本文件的数据通过流对象在控制台显示</span>
        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferddWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        String line <span class="token operator">=</span> null
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="6-打印流"><a href="#6-打印流" class="headerlink" title="6.打印流"></a>6.打印流</h2><h3 id="6-1-打印流概念-打印流是写数据的"><a href="#6-1-打印流概念-打印流是写数据的" class="headerlink" title="6.1.打印流概念:打印流是写数据的."></a>6.1.打印流概念:打印流是写数据的.</h3><h3 id="6-2-特点："><a href="#6-2-特点：" class="headerlink" title="6.2.特点："></a>6.2.特点：</h3><p>A:可以写任意数据类型的数据</p>
<p>B:如果启动了自动刷新，能自动刷新，还会换行。println()<br>C:可以直接往文件写数据</p>
<p><strong>注意</strong>：看构造方法，一个流对象的构造中如果同时有String和File的构造参数，那么该流对象就可以读写文件。</p>
<h3 id="6-3-用打印流改进复制文本文件的操作-PrintStream可应用于二进制文件"><a href="#6-3-用打印流改进复制文本文件的操作-PrintStream可应用于二进制文件" class="headerlink" title="6.3.用打印流改进复制文本文件的操作(PrintStream可应用于二进制文件)"></a>6.3.用打印流改进复制文本文件的操作(PrintStream可应用于二进制文件)</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//数据源：</span>
    <span class="token comment" spellcheck="true">//c:\\a.txt</span>
<span class="token comment" spellcheck="true">//目的地：</span>
    <span class="token comment" spellcheck="true">//d:\\b.txt</span>
        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"c:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PrintWriter pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"d:\\b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        String line <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        pw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="7-字符编码"><a href="#7-字符编码" class="headerlink" title="7.字符编码"></a>7.字符编码</h2><h3 id="7-1-编码表："><a href="#7-1-编码表：" class="headerlink" title="7.1.编码表："></a>7.1.编码表：</h3><p>就是字符和对应的数据组成的一张表。</p>
<h3 id="7-2-常见的编码表："><a href="#7-2-常见的编码表：" class="headerlink" title="7.2.常见的编码表："></a>7.2.常见的编码表：</h3><p>ASCII<br>ISO-8859-1<br>GBK<br>GB2310<br>GB18030<br>UTF-8<br>BIG5</p>
<h3 id="7-3-转换流中的编码问题"><a href="#7-3-转换流中的编码问题" class="headerlink" title="7.3.转换流中的编码问题"></a>7.3.转换流中的编码问题</h3><p>A:字符流 = 字节流+编码表<br>B:通过转换流写入数据，指定为UTF-8编码，并通过UTF-8编码读取。</p>
<h2 id="8-存储程序对象信息"><a href="#8-存储程序对象信息" class="headerlink" title="8.存储程序对象信息."></a>8.存储程序对象信息.</h2><h3 id="8-1-通过Properties-序列化存储"><a href="#8-1-通过Properties-序列化存储" class="headerlink" title="8.1.通过Properties,序列化存储."></a>8.1.通过Properties,序列化存储.</h3><p><strong>Properties:</strong></p>
<p>通过键值对的形式,将对象的属性名,属性值作为键值对映射的方式存入Map中.(Properties:为Map的实现类)</p>
<p><strong>序列化</strong>:</p>
<p>通过ObjectInputStream流将实现了序列化接口的类实例化对象以二进制数据的形式写入文本文件中</p>
<pre><code>A: setProperty(String key,String value)
B:getProperty(String key)

getProperty(String key,String defaultValue)
C:Set&lt;String&gt; stringPropertyNames()
和IO流结合的方法：
A:list 通过打印流把数据保存到文件中
B:load 通过任意流把文本中的数据加载到集合中
C:store 通过任意流把数据保存到文件中
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题外话:&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;这近十天来.为了赶进度,越来越发现自己没有花多少时间去总结回顾之前的知识了.突然发现IO流已经学习完几天了.竟然一次也没复习过.甚至于提到IO某些知识都有种莫名的陌生感.&lt;/strong&gt; 的确时间不等人,但是某些必要的时间还是得划出来.更不能因为周边某些人的急功近利,反而乱了自己的节奏.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;不断的戒掉旧习,却又不断的有新的恶习.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;想优秀,要努力.&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="基础视频" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80%E8%A7%86%E9%A2%91/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="笔记" scheme="http://gaoll.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JAVA" scheme="http://gaoll.top/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-重要代码记录Part1(end)</title>
    <link href="http://gaoll.top/2014/01/06/%E9%87%8D%E8%A6%81%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95Part1(end)/"/>
    <id>http://gaoll.top/2014/01/06/重要代码记录Part1(end)/</id>
    <published>2014-01-06T15:08:00.000Z</published>
    <updated>2017-08-24T08:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>黑马程序员-重要代码记录</strong></p>
<h1 id="1-返回两个字符串的共有最大长度子字符串"><a href="#1-返回两个字符串的共有最大长度子字符串" class="headerlink" title="1.返回两个字符串的共有最大长度子字符串."></a>1.返回两个字符串的共有最大长度子字符串.</h1><a id="more"></a>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*
需求分析:返回两个字符串的最大长度相同字符串.
思路:
1.录入两个字符串.
2.用循环以短的那个字符串长度n为循环次数.
3.再循环的n次中,建立内循环,循环从短的那个数组的0索引开始,长度从1到段数组的长度结束.定义新字符串.
4.进行判断该字符串是否在较长字符串中.
5返回循环结束后的那个新字符串.
*/</span>

<span class="token keyword">class</span> <span class="token class-name">MaxSubString</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//录入两个字符串.</span>
        String s1<span class="token operator">=</span><span class="token string">"awsxe3dcrfvtgbythnujmikd"</span><span class="token punctuation">;</span>
        String s2<span class="token operator">=</span><span class="token string">"gfdcrfxfgghgefs"</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getMaxSubString</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义方法,获取两个字符串的共有最大长度字符串.</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getMaxSubString</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span>String s2<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//外循环定义用来辅助内循环定义新字符串的长度.</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>z<span class="token operator">=</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>x<span class="token punctuation">;</span>z<span class="token operator">&lt;</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">,</span>z<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//通过对x的引用,控制y,z之间的字符串长度固定,这样,通过外循环控制长度避免索引越界和遍历不完全.</span>
            <span class="token punctuation">{</span>
                String temp<span class="token operator">=</span>s2<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//    System.out.println(temp);</span>
                    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>总结:</strong></p>
<p><strong>最开始做这道题,总是在如何确定for循环的初始化条件和控制循环终点条件.</strong><br><strong>最后发现,还是得通过列举出实际情况,在实际情况中寻找规律.所以,关于那个思维记录贴中的第二篇Note还是相当有价值的.</strong></p>
<p>**因为是要截取共有最大长度子字符串.所以确定长度必然小于短的子字符串.</p>
<h2 id="然后-用y-z-就是s2-length-x-来定义每次内循环来截取字符串的首尾索引-相当于两个游标-游标之间长度固定-在短字符串中向末尾依次移位-看是否为相同子字符串"><a href="#然后-用y-z-就是s2-length-x-来定义每次内循环来截取字符串的首尾索引-相当于两个游标-游标之间长度固定-在短字符串中向末尾依次移位-看是否为相同子字符串" class="headerlink" title="然后,用y,z(就是s2.length()-x),来定义每次内循环来截取字符串的首尾索引.相当于两个游标,游标之间长度固定,在短字符串中向末尾依次移位,看是否为相同子字符串.**"></a>然后,用y,z(就是s2.length()-x),来定义每次内循环来截取字符串的首尾索引.相当于两个游标,游标之间长度固定,在短字符串中向末尾依次移位,看是否为相同子字符串.**</h2><h1 id="2-控制台打印给定日期日历"><a href="#2-控制台打印给定日期日历" class="headerlink" title="2.控制台打印给定日期日历."></a>2.控制台打印给定日期日历.</h1><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*
需求:
通过键盘录入的年月日,打印出当月日历.
分析:
这里要用到1990,1,1日作为定位基点.某年某月某日减去1990,1,1日得到的天数模7的值即为星期几.
步骤:
1.键盘录入年月日.
2.通过for循环和if判断语句,累加天数.
3.通过辅助日期1990,1,1日得到该月第一天的星期数.
4.绘制日历表头,定位当月第一天在一周中的位置.
5.打印日历.
*/</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Date</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//键盘录入年月日.</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t日历查询\t\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Scanner in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入年份："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> year<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入月份："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//int mouth=in.nextInt();</span>
          <span class="token keyword">int</span> mouth<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入日期："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> day<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您输入的是"</span><span class="token operator">+</span>year<span class="token operator">+</span><span class="token string">"年"</span><span class="token operator">+</span>mouth<span class="token operator">+</span><span class="token string">"月"</span><span class="token operator">+</span>day<span class="token operator">+</span><span class="token string">"日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//判断所输入年份，计算整年离1990年的天数</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1990</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span>year<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>a<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>a<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                sum<span class="token operator">=</span>sum<span class="token operator">+</span><span class="token number">366</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
                sum<span class="token operator">=</span>sum<span class="token operator">+</span><span class="token number">365</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//判断所输入月份，计算整月份离元月一号的天数</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">&lt;</span>mouth<span class="token punctuation">;</span>b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    sum<span class="token operator">=</span>sum<span class="token operator">+</span><span class="token number">29</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    sum<span class="token operator">=</span>sum<span class="token operator">+</span><span class="token number">28</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">4</span><span class="token operator">||</span>b<span class="token operator">==</span><span class="token number">6</span><span class="token operator">||</span>b<span class="token operator">==</span><span class="token number">9</span><span class="token operator">||</span>b<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    sum<span class="token operator">=</span>sum<span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                sum<span class="token operator">=</span>sum<span class="token operator">+</span><span class="token number">31</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/*    //整年，整月天数，加上输入日期即是总共离1990年元月一日的天数
                sum=sum+day;
        System.out.println("这一天距离1990年，元月，一日总共"+sum+"天");
    }
    */</span>
        <span class="token comment" spellcheck="true">//绘制日历表头,定位当月第一天在一周中的位置.</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t日历开始打印"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日\t一\t二\t三\t四\t五\t六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//确定第一天，就是所选择日期月份第一天是周几,此时sum已经被注释过了，就是已经是单年份，月份，天数总和</span>
        sum<span class="token operator">=</span>sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//进行月份的判断，将月份天数确定，赋值给m</span>
        <span class="token keyword">int</span> m<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mouth<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                m<span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
                m<span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mouth<span class="token operator">==</span><span class="token number">4</span><span class="token operator">||</span>mouth<span class="token operator">==</span><span class="token number">6</span><span class="token operator">||</span>mouth<span class="token operator">==</span><span class="token number">9</span><span class="token operator">||</span>mouth<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                m<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                m<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">//此时的天数对7取余，余数是几，就是周几,并将1号定位并打印</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>sum<span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//将打印日历循环做出，循环M次</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>n<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">7</span><span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sum<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
                sum<span class="token operator">++</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>总结:</strong></p>
<p><strong>学习java基础语法部分时,总是对循环有种莫名的恐惧 ,对于循环的控制条件难以把握.</strong><br><strong>日历打印题目是从网上看到的.拿来通过分析,思路,代码实现,相当有成就感.虽然现在回头发现很多需要改进,但是在入门期多做这样的联系还是相当有帮助的.</strong></p>
<p><strong>下面是后期学习了新知识的改进版(面向对象的思想渐渐深入,将方法尽量封装):</strong></p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/*
需求:建立一个简易的日历查询工具,输入需要查询的年月,在控制台打印该月日历(带星期).
分析:首先判断所输入日期的月份天数.在判断当月第一天星期数.再打印.
思路:
1.定义一个方法,给定年月日参数来打印日历.
2.键盘录入年月日,调用方法打印日历.
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateSearch</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Scanner in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入想打印月份月历的年,月.\n请输入年份:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> year<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入月份:(1~12)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> month<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前年份天数为:"</span><span class="token operator">+</span><span class="token function">getYear</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前月份天数为:"</span><span class="token operator">+</span><span class="token function">getMonth</span><span class="token punctuation">(</span>month<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printDate</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">ifRun</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//建立方法,判断是否闰年.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//判断并返回当年天数.</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">ifRun</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">366</span><span class="token operator">:</span><span class="token number">365</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//建立方法,判断并返回当月天数.</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">,</span><span class="token keyword">int</span> year<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>month<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ifRun</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token number">29</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">28</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>month<span class="token operator">==</span><span class="token number">4</span><span class="token operator">||</span>month<span class="token operator">==</span><span class="token number">6</span><span class="token operator">||</span>month<span class="token operator">==</span><span class="token number">9</span><span class="token operator">||</span>month<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token number">30</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">31</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//建立方法,返回需要判断天数的星期数(星期日为0)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getWeekday</span><span class="token punctuation">(</span><span class="token keyword">int</span> days<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">(</span>days<span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义方法,打印当月日历..</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printDate</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1990</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> year <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这里,因为1990,1月1日为周一,拿来做参照.</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ifRun</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                sum<span class="token operator">+=</span><span class="token number">366</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            sum<span class="token operator">+=</span><span class="token number">365</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>month<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum<span class="token operator">+=</span><span class="token function">getMonth</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日\t一\t二\t三\t四\t五\t六\t\n-----------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>sum<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>sum<span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>n<span class="token operator">&lt;=</span><span class="token function">getMonth</span><span class="token punctuation">(</span>month<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">7</span><span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sum<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
                sum<span class="token operator">++</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<hr>
<h1 id="3-学习循环链表的建立与使用"><a href="#3-学习循环链表的建立与使用" class="headerlink" title="3.学习循环链表的建立与使用"></a>3.学习循环链表的建立与使用</h1><p><strong>链表类:(定义循环链表的方法类,包括创建,遍历,功能等)</strong></p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*
         需求:学习循环链表的建立与使用
         思路:
                 循环链变在于他每个对象内,有两部分组成,地址域和首地址.
                 每个元素的地址域指向链表中的他的下一个地址.而首地址则是他本个元素的对象的地址.
         步骤:
                 1.建立第一个对象,对象内部定义下一个对象的指向.
                 2.建立构造函数,构造对象,如果为第一个对象,额外定义一个用来指向下一个对象的temp对象,用来保存需要传递的地址值.
                 3.如果是最后一个对象,则将其temp中的传递的地址值,指向第一个对象.                
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CycLink</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//首先建立第一个成员的引用.就是将环形链表的头,定义.</span>
    Member firstMember<span class="token operator">=</span>null<span class="token punctuation">;</span>
    Member temp<span class="token operator">=</span>null<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//定义成员数量.</span>

    <span class="token comment" spellcheck="true">//测试类中使用的变量</span>
    <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//play功能中,从那个结点开始.</span>
    <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报数到b,此人踢出.</span>

    <span class="token function">CycLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//设置环形链表的长度,就是结点的个数</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">=</span>num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setA</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span>a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setB</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token operator">=</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//初始化,建立循环链表.</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//创建成员.</span>
                Member m<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Member</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>firstMember<span class="token operator">=</span>m<span class="token punctuation">;</span>
                temp<span class="token operator">=</span>firstMember<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>
                Member m<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Member</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                temp<span class="token punctuation">.</span>nextMember<span class="token operator">=</span>m<span class="token punctuation">;</span>
                temp<span class="token operator">=</span>m<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                Member m<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Member</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                temp<span class="token punctuation">.</span>nextMember<span class="token operator">=</span>m<span class="token punctuation">;</span>
                m<span class="token punctuation">.</span>nextMember<span class="token operator">=</span>firstMember<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义测试类中用到的约瑟夫问题具体使用</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Member play <span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstMember<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>play<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>a<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            play<span class="token operator">=</span>play<span class="token punctuation">.</span>nextMember<span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>play<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>play<span class="token punctuation">.</span>nextMember<span class="token operator">!=</span>play<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    play<span class="token operator">=</span>play<span class="token punctuation">.</span>nextMember<span class="token punctuation">;</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>play<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                Member tempplay<span class="token operator">=</span>play<span class="token punctuation">.</span>nextMember<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//                System.out.println(play);</span>
                <span class="token comment" spellcheck="true">//tempplay=tempplay.nextMember;</span>
                play<span class="token punctuation">.</span>nextMember<span class="token operator">=</span>tempplay<span class="token punctuation">.</span>nextMember<span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>play<span class="token operator">+</span><span class="token string">"\t踢掉报数为5的人."</span><span class="token operator">+</span>tempplay<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                play<span class="token operator">=</span>play<span class="token punctuation">.</span>nextMember<span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>play<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>play<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//遍历循环链表</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printCycLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Member start<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstMember<span class="token punctuation">;</span>
        <span class="token keyword">do</span><span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
                start<span class="token operator">=</span>start<span class="token punctuation">.</span>nextMember<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">!=</span>firstMember<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"遍历结束,回到循环链表起始处"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>结点类:(封装每个结点包含的自身属性和指向属性)</strong></p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Member</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//环形链表中的元素,其实就是结点.应当包括其对象特有属性和一个结点特有的应用型指向,就是地址域.</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    Member nextMember<span class="token operator">=</span>null<span class="token punctuation">;</span>
    <span class="token function">Member</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">Member</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token operator">+</span><span class="token string">"\t指向为:\t"</span><span class="token operator">+</span>nextMember<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>测试类:(测试循环列表的创建,遍历增删是否正常,并可以结合具体问题实施)</strong></p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CycLinkTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        CycLink cy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CycLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个新的循环链表</span>
        cy<span class="token punctuation">.</span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置循环链表的长度.</span>
        cy<span class="token punctuation">.</span><span class="token function">createLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建次循环链表.</span>
        cy<span class="token punctuation">.</span><span class="token function">setA</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置开始结点.</span>
        cy<span class="token punctuation">.</span><span class="token function">setB</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置报何数踢出.</span>
        cy<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//cy.printCycLink();//遍历打印循环链表.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>总结:</strong><br>循环链表是在学习集合说到LinkedList集合底层是链表结构时想到的循环链表名词.结合之前做过的报数退出(约瑟夫问题),想到的高端实现方法.</p>
<p>循环链表的建立我发现其实再使用上对于现有的集合而言,有自己的独特优势:<br>在某些需要实时跟新集合,反馈集合信息进行后续执行的情况下,循环链表具有先天优势:增删快.</p>
<p>而他的弊端则在,循环链表需要人为定义初始结点,查找指定元素相对于其他所有集合都没有优势,必须从初始结点一个个向下找.<br>下面是关于约瑟夫问题我用循环的解答:(相对于用循环链表解答繁琐和很多.)</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*
有n个人围成一圈，顺序排号。从第一个人开始报数（从1到m报数），凡报到m的人退出圈子，问最后留下的是原来第几号的那位。求算法思路 
 */</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YueSeFu</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入人数n和数到m出列的n,m值:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入n(大于0的整数):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入m(大于0的整数):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> <span class="token function">getEnds</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个人为最后留下来的人."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getEnds</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 建立一个长度为n的int型数组,元素为每个人的编号(标号为数组索引+1)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> cycle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cut <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 声明两个辅助循环的增量,cycle为循环数;cut为提出圈人数.</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cycle<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>cycle <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                cycle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                cut<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cut <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 判断条件,因为cut为最终终止循环的增量,所以先判断</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 判断为不终止循环的基础上,判断是否为循环最后一个数据,是,则给i赋值0,使之i++后重新为1,进入新一轮循环.</span>
                    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>        
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<hr>
<h1 id="4-蛇形数组-相当锻炼思维"><a href="#4-蛇形数组-相当锻炼思维" class="headerlink" title="4.蛇形数组(相当锻炼思维)"></a><strong>4.蛇形数组(相当锻炼思维)</strong></h1><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*
 * 需求:
 * 写一个方法,打印等长的二维数组,要求从1开始的自然数由方阵的最外圈向内螺旋方式的顺序排列.如:n=4,打印:
 *                 1        2        3        4                        
 *                 12        13        14        5                        
 *                 11        16        15        6                        
 *                 10        9        8        7                        
 * 思路分析:    
 *         1.观察,可知需求的二维数组中元素应该对应所打印每个数据.行,及n为二维数组的长度及其中每个一位int型一维数组的长度.
 *         2.同时,观察得到具体每个int型元素是由行,列边界值完全遍历,再到边界值-1完全遍历...直到填满整个二维数组.
 * 实现步骤:
 *         1.建立一个每个int型一维数组长度为n,二维数组长度也为n的二维数组.
 *         2.遍历赋值.
 *         3.打印.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SnakeArray</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n------------分-----割-----线------------\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//定义一个按照需求打印二维数组的方法,参数为int型n.</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//arr[0][0]</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">&lt;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//arr[0][0]>>arr[0][n-2]</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> p<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">//arr[0][n-1]>>arr[n-2][n-1]</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> p<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>p<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>p<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">//arr[n-1][n-1]>>arr[n-1][1]</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>p<span class="token punctuation">;</span>i<span class="token operator">></span>p<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    arr<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">//arr[n-1][0]>>arr[1][0]</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>p<span class="token punctuation">;</span>j<span class="token operator">></span>p<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">//arr[1][0]>>arr[1][1]之后循环上述过程,即可完成偶数n的赋值.</span>
            <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//若n为奇数,则需要对忽略位置[n/2][n/2]进行赋值.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">//打印数组.</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n---------------------------------------------\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>总结:</strong></p>
<h2 id="通过这次分析蛇形数组-虽然用循环做出了最终答案-但是后来发现这明显用到了递归的思想-所以等面试落定-我再用递归方法来改进下"><a href="#通过这次分析蛇形数组-虽然用循环做出了最终答案-但是后来发现这明显用到了递归的思想-所以等面试落定-我再用递归方法来改进下" class="headerlink" title="通过这次分析蛇形数组,虽然用循环做出了最终答案,但是后来发现这明显用到了递归的思想.所以等面试落定,我再用递归方法来改进下."></a><strong>通过这次分析蛇形数组,虽然用循环做出了最终答案,但是后来发现这明显用到了递归的思想.所以等面试落定,我再用递归方法来改进下.</strong></h2><h2 id="5-控制台五子棋代码"><a href="#5-控制台五子棋代码" class="headerlink" title="5.控制台五子棋代码."></a>5.控制台五子棋代码.</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WuZiQi</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 选手落子.</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">" + "</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        A<span class="token operator">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 判断若输入点已有棋子,则重新输入.</span>
            <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请落子:(输入落子坐标值1~10)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                x <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                y <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ifRight</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ifRight</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的棋子位置异常,请重新输入."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">" ● "</span><span class="token punctuation">)</span> <span class="token operator">||</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">" O "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此处已有棋子,请重新落子:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">" ● "</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">/*
             * for (int i = 0; i &lt; board.length; i++) {// 打印棋盘. for (int j = 0;
             * j &lt; board[i].length; j++) { System.out.print(board[i][j]); }
             * System.out.println(); }
             */</span>
            <span class="token function">print</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电脑落子,请稍等..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Random r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> xC <span class="token operator">=</span> r1<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> yC <span class="token operator">=</span> r1<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/*
                 * int xC = new Random().nextInt(9) + 1; int yC = new
                 * Random().nextInt(9) + 1;
                 */</span>

                <span class="token comment" spellcheck="true">// int xC =(int)Math.random()*10+1;</span>
                <span class="token comment" spellcheck="true">// int yC = (int) Math.random() * 10 + 1;</span>
                <span class="token comment" spellcheck="true">// //为什么用Math里的random不行???</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>xC<span class="token punctuation">]</span><span class="token punctuation">[</span>yC<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">" O "</span><span class="token punctuation">)</span> <span class="token operator">||</span> board<span class="token punctuation">[</span>xC<span class="token punctuation">]</span><span class="token punctuation">[</span>yC<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">" ● "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此处已有棋子,请重新落子:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    board<span class="token punctuation">[</span>xC<span class="token punctuation">]</span><span class="token punctuation">[</span>yC<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">" O "</span><span class="token punctuation">;</span>
                    count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">/*
                 * for (int i = 0; i &lt; board.length; i++) {// 打印棋盘. for (int j =
                 * 0; j &lt; board[i].length; j++) { System.out.print(board[i][j]);
                 * } System.out.println(); }
                 */</span>
                <span class="token function">print</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">// 判断输赢条件.</span>
            String resoult1 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
            String resoult2 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
            String resoult3 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
            String resoult4 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 判断横行,竖行出现五连.</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    resoult1 <span class="token operator">+=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    resoult2 <span class="token operator">+=</span> board<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>resoult1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">" ●  ●  ●  ●  ● "</span><span class="token punctuation">)</span>
                        <span class="token operator">||</span> resoult2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">" ●  ●  ●  ●  ● "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" ● 选手赢了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span> A<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resoult1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">" O  O  O  O  O "</span><span class="token punctuation">)</span>
                        <span class="token operator">||</span> resoult2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">" O  O  O  O  O "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" O 选手赢了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span> A<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    resoult1 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                    resoult2 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">/*
             * for (int i = 0, j = 0; i &lt;= 4 &amp;&amp; j &lt;= 4; i++, j++) { resoult3 +=
             * board[i][j]; }
             */</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 判断右斜是否出现五连</span>
                <span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> b <span class="token operator">=</span> j<span class="token punctuation">;</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        resoult3 <span class="token operator">+=</span> board<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        resoult4 <span class="token operator">+=</span> board<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        a<span class="token operator">++</span><span class="token punctuation">;</span>
                        b<span class="token operator">++</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            a <span class="token operator">=</span> i<span class="token punctuation">;</span>
                            b <span class="token operator">=</span> j<span class="token punctuation">;</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>resoult3<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">" ●  ●  ●  ●  ● "</span><span class="token punctuation">)</span>
                            <span class="token operator">||</span> resoult4<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">" ●  ●  ●  ●  ● "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" ● 选手赢了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span> A<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resoult3<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">" O  O  O  O  O "</span><span class="token punctuation">)</span>
                            <span class="token operator">||</span> resoult4<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">" O  O  O  O  O "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" O 选手赢了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span> A<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        resoult3 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                        resoult4 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 判断左斜是否出现五连</span>
                <span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> b <span class="token operator">=</span> j<span class="token punctuation">;</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        resoult3 <span class="token operator">+=</span> board<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        resoult4 <span class="token operator">+=</span> board<span class="token punctuation">[</span><span class="token number">9</span> <span class="token operator">-</span> a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        a<span class="token operator">++</span><span class="token punctuation">;</span>
                        b<span class="token operator">--</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            a <span class="token operator">=</span> i<span class="token punctuation">;</span>
                            b <span class="token operator">=</span> j<span class="token punctuation">;</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>resoult3<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">" ●  ●  ●  ●  ● "</span><span class="token punctuation">)</span>
                            <span class="token operator">||</span> resoult4<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">" ●  ●  ●  ●  ● "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" ● 选手赢了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span> A<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resoult3<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">" O  O  O  O  O "</span><span class="token punctuation">)</span>
                            <span class="token operator">||</span> resoult4<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">" O  O  O  O  O "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" O 选手赢了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span> A<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        resoult3 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                        resoult4 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">ifRight</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 判断用户输入的数据转化成的数组索引是否合理</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// System.out.println( "  1  2  3  4  5  6  7  8  9  ⑩");</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 打印棋盘.</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<p>总结:<br>写这个代码的最初原因是在学习疯狂JAVA书的时候,看他了作者在书中提到的用二维数组可以实现在控制台上布置五子棋棋盘.</p>
<p>然后便突然想用控制台做出一个可以跟电脑一起下五子棋的控制台程序.<br>现在存在的问题:电脑没有落子的优先级.(思考后,认为可以这样,定义一个枚举类,元素为可能出现的2,3,4连的棋子情况,判断当前棋盘是否存在枚举中元素,有则在其首位落子.无则先现在实现的那样,random落子)</p>
<hr>
<h2 id="5-表象文件隐藏其他文件"><a href="#5-表象文件隐藏其他文件" class="headerlink" title="5.表象文件隐藏其他文件"></a>5.表象文件隐藏其他文件</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*
 需求:
 通过复制的追加模式,将两个文件中的指定文件用另一文件隐藏.
 通过反向读取将上述方法的隐藏文件与表象文件分离.
 思路:
 文件的复制有追加模式,而追加模式如果在一个已经具有文件格式的文件上进行,则会在不改变该文件表面属性
 的基础上,将需要隐藏文件的数据追加在其后.
 对于一个用某文件隐藏了目标文件的文件,通过从去表面文件结尾开始截取可以进行还原.
 步骤:
 1.给定两个文件,表象文件(最好为图片):用来确定隐藏信息文件的表现形式.指定隐藏文件:需要在表象文件下隐藏的文件.
 2.定义方法,先创建表象文件副本,而后在副本以追加模式写入需隐藏文件.
 3.定义方法,将隐藏信息文件进行分解,需要用表象文件来辅助定位开始截取位置.
 4.保存截取后文件(即原带隐藏文件).
 */</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">CoverInfo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入隐藏文件所用表象文件路径:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String outerStr <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入隐藏文件路径:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String innerStr <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入隐藏文件完成后存储路径:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String targetStr <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        File outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>outerStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        File inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>innerStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        File target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>targetStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token function">coverInfo</span><span class="token punctuation">(</span>outer<span class="token punctuation">,</span> inner<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 定义隐藏文件方法.</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">coverInfo</span><span class="token punctuation">(</span>File outer<span class="token punctuation">,</span> File inner<span class="token punctuation">,</span> File target<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>outer<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>inner<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件不存在,请检查."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标目录不存在,自动创建."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            target<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        BufferedInputStream bisOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>outer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferedInputStream bisIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>inner<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> outer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bisOut<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        bisOut<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bisIn<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bisIn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"隐藏文件操作成功."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedInputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedOutputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//定义抽取隐藏文件类</span>
<span class="token keyword">class</span> <span class="token class-name">ReCoverInfo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入隐藏文件所用表象文件路径:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String outerStr <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入隐藏文件操作后文件路径:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String coveredStr <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入隐藏文件提取后存储路径:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String targetStr <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        File outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>outerStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        File coveredFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>coveredStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        File target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>targetStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">reCoverInfo</span><span class="token punctuation">(</span>outer<span class="token punctuation">,</span> coveredFile<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 定义反向获取隐藏文件方法</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reCoverInfo</span><span class="token punctuation">(</span>File outer<span class="token punctuation">,</span> File coveredFile<span class="token punctuation">,</span> File target<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>outer<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>coveredFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件不存在,请检查."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标目录不存在,自动创建."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            target<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        BufferedInputStream bisOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>outer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferedInputStream bisCoveredFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>coveredFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">"提取出的隐藏文件_请自加后缀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferedOutputStream bosReCoverInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bisOut<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bisCoveredFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bisCoveredFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bosReCoverInfo<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        bosReCoverInfo<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bisCoveredFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bisOut<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"隐藏文件提取操作成功."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>总结:</strong><br>这个小代码说起来相当简单,其实就是在建立输出流对象是,将构造函数改为(File File,boolean true),即为追加模式.</p>
<p>在学习使用此代码时,发现追加模式写入另外文件信息时,并没有破坏第一个文件的数据结构,所以在window中能表现出表象文件的属性,也可以正常使用.但是同样的,在后面存储的完整的第二个文件的数据也得到了完美保存 ,将至截取出来重新封装便又还原了那个隐藏的文件.<br>虽然代码没什么技术含量,不过记录下,算是一个小小的发现…</p>
<hr>
<h2 id="6-关于Map的keySet-方法返回的Set类型的探究"><a href="#6-关于Map的keySet-方法返回的Set类型的探究" class="headerlink" title="6.关于Map的keySet()方法返回的Set类型的探究."></a>6.关于Map的keySet()方法返回的Set类型的探究.</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*
需求：获取一个字符串中出现的字母及其出现次数。
分析：字符串每位上的字符进行遍历，然后将每位上的字符添加入定义好的一个Map集合。存储动作时加上判断，如果集合中不存在该键(字符作键)，添加该键值(字符,1),如果存在则值加1.
步骤:
1.键盘获取一个字符串对象.
2.定义一个Map,遍历字符串,将每一位上的字符当作键,存入Map集合。
3.存储都做加上判断，集合中没有，则值为1，存入。集合中有，则将已有值加一存入。
4.遍历Map集合并打印，达到要求格式。
*/</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>TreeMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>TreeSet<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ApearNum</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入需要获取出现字母及其次数的字符串："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String str <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        TreeMap <span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>Integer<span class="token operator">></span> strMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//这里，突然想到增强for，适用于集合和数组，但不论从哪方面来说，String我都觉得他足够具有特殊性。</span>
        <span class="token comment" spellcheck="true">//for(Character str.charAt(i) : str)        //所以这里,对增强for是否适用于String,进行了实验,事实证明,不行</span>
        <span class="token comment" spellcheck="true">//for(Character charI : str)</span>
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//Character temp =charI;</span>
            Character temp<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历字符串.给自定义Map添加元素.</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>strMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果Map中不存在,</span>
            <span class="token punctuation">{</span>
                strMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                strMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>strMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//TreeSet &lt;Character> strSet = (TreeSet)strMap.keySet();   这里，运行出现类型转换异常，可以得知，keySet()得到的键集合是与Map对应的类型.</span>
        <span class="token comment" spellcheck="true">//TreeSet &lt;Character> strSet =(TreeSet)strMap.keySet();    为什么这里,我已经将Map改成TreeMap还是类型转换异常?</span>
        Set <span class="token operator">&lt;</span>Character<span class="token operator">></span>    strSet <span class="token operator">=</span> strMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        TreeSet strSet2 <span class="token operator">=</span> <span class="token punctuation">(</span>TreeSet<span class="token punctuation">)</span>strSet<span class="token punctuation">;</span>
        StringBuilder strSB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>Character key <span class="token operator">:</span> strSet<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            strSB<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>strMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strSB<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>总结:</strong></p>
<p>在上面的代码中,在我进行Map集合遍历的时候,有了这种想法,就是keySet返回的应到是key的一个Set集合,而众所周知,Map的具体子实现类的key是通过特定方式保证唯一的,就是Tree(二叉树)Hash(哈希表).</p>
<p>所以我就想这里得到的keySet()返回的Set集合是不是应该就是对应的TreeSet或者HashSet集合.</p>
<p>所以,代码中我用强制类型转换进行了试验,结果是悲剧的…他一个都不是.</p>
<p>所以从源代码中寻找答案.</p>
<p>发现,原来,TreeMap中的keySet()方法中,定义了一个静态的成员内部类,实现了一个叫SortedSet的接口(TreeSet也实现了该接口).并不是我想想的直接是TreeSet或者HashSet.</p>
<p>实际上TreeMap中和HashMap中该方法返回的分别都是静态的成员内部类,继承AbstractSet.</p>
<p>所以,这里我不得不感慨,Java多态思想运用的太太太出神入化了.</p>
<p>就像现实世界一句经典的话:不管黑猫白猫.抓到老鼠,都是好猫!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;黑马程序员-重要代码记录&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-返回两个字符串的共有最大长度子字符串&quot;&gt;&lt;a href=&quot;#1-返回两个字符串的共有最大长度子字符串&quot; class=&quot;headerlink&quot; title=&quot;1.返回两个字符串的共有最大长度子字符串.&quot;&gt;&lt;/a&gt;1.返回两个字符串的共有最大长度子字符串.&lt;/h1&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="思路" scheme="http://gaoll.top/tags/%E6%80%9D%E8%B7%AF/"/>
    
      <category term="java" scheme="http://gaoll.top/tags/java/"/>
    
      <category term="代码" scheme="http://gaoll.top/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-异常</title>
    <link href="http://gaoll.top/2014/01/03/%E5%BC%82%E5%B8%B8/"/>
    <id>http://gaoll.top/2014/01/03/异常/</id>
    <published>2014-01-02T16:15:00.000Z</published>
    <updated>2017-08-24T07:57:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>(感觉自己最近为了赶进度,很久没有总结回顾以前的知识,今天开始要深刻反思)</p>
<hr>
<p><strong>异常</strong></p>
<h2 id="1-1-异常概念：就是程序出现的不正常情况。"><a href="#1-1-异常概念：就是程序出现的不正常情况。" class="headerlink" title="1.1.异常概念：就是程序出现的不正常情况。"></a><strong>1.1.异常概念：</strong>就是程序出现的不正常情况。</h2><h2 id="1-2-异常体系"><a href="#1-2-异常体系" class="headerlink" title="1.2.异常体系:"></a><strong>1.2.异常体系:</strong></h2><p>Throwable类</p>
<p>|–Error类 严重的问题，是处理不了的。要改正代码的。<br>|–Exception类 非RuntimeException的，是需要处理的。编译期异常。</p>
<p>|–RuntimeException类 不需要处理的，是需要改代码的。运行期异常。</p>
<a id="more"></a>
<p><strong>例如:</strong><br>Error:地震，海啸。<br>Exception:感冒了，头疼。</p>
<h2 id="1-3-java虚拟机的默认处理方法"><a href="#1-3-java虚拟机的默认处理方法" class="headerlink" title="1.3.java虚拟机的默认处理方法."></a><strong>1.3.java虚拟机的默认处理方法.</strong></h2><p>把异常的类名，原因，位置等信息显示在控制台。<br>一旦有异常发生，其后的代码不能继续执行<strong>。</strong></p>
<hr>
<h2 id="1-4-异常的解决方案"><a href="#1-4-异常的解决方案" class="headerlink" title="1..4.异常的解决方案."></a><strong>1..4.异常的解决方案.</strong></h2><p><strong>A:try方式</strong></p>
<p>基本格式<strong>：</strong></p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">try</span><span class="token punctuation">{</span>
        可能发生异常的代码<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类名 变量名<span class="token punctuation">)</span><span class="token punctuation">{</span>
        异常的处理代码<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
        释放资源的代码<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>注意：一旦有一次发生，就会立马执行catch里面的代码 <strong>。<br>变形格式：</strong></p>
<pre class=" language-java"><code class="language-java"> <span class="token keyword">try</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">catch</span>
<span class="token keyword">try</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">catch</span>
<span class="token keyword">try</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">finally</span>
<span class="token keyword">try</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">finally</span>
</code></pre>
<p><strong>注意: JDK7针对多个catch进行了优化：</strong> catch(异常1 | 异常2 | 异常3 … 变量){}<br>这些异常必须是平级关系。<br>和try…catch…catch的不同点是:</p>
<p>JDK7的这种方案是必须平级关系，不能有子父关系。<br>而try…catch…catch父亲放最后是可以的。<strong>B:抛出处理</strong><br>用throws关键字在方法上声明(抛出)。(这种方法比较消极,不推荐使用)</p>
<h2 id="1-5-Exception和RuntimeException的区别"><a href="#1-5-Exception和RuntimeException的区别" class="headerlink" title="1.5.Exception和RuntimeException的区别."></a><strong>1.5.Exception和RuntimeException的区别.</strong></h2><p><strong>A:</strong></p>
<p><strong>Exception 编译时期异常，必须处理的。</strong><br>如果在方法上，throws了该类型的异常，将来调用者必须处理。<br>如果在方法内部，throw了该类型的异常，必须在方法上throws该异常。<br><strong>B:</strong><br><strong>RuntimeException 运行时期异常，是不需要处理的。要改代码的。</strong><br>如果在方法上，throws了该类型的异常，不需要处理。<br>如果在方法内部，throw了该类型的异常，方法上可以throws该异常，也可以不throws该异常。</p>
<hr>
<h2 id="1-6-关于异常我的总结"><a href="#1-6-关于异常我的总结" class="headerlink" title="1.6.关于异常我的总结"></a><strong>1.6.关于异常我的总结</strong></h2><p><strong>throw:<br>1.</strong>使用在方法内部,格式为:throw &lt;异常对象&gt;.(只能是单个对象)<br><strong>2.</strong>throw不可以单独使用,要么搭配throws,将异常抛出给调用方法者;要么搭配try-catch-finally处理掉该异常.<br><strong>throws:<br>1.</strong>使用在方法声明上,在参数列表后与方法体前,格式为:throw &lt;异常类&gt;.(可以单个或者多个类,逗号分割)<br><strong>2.</strong>throws可以单独使用,将可能抛出的异常抛出给调用方法者处理.(如果是主方法上使用,即由jvm异常处理机制处理). </p>
<p><strong>try{}:</strong><br>try{}的大括号中,放入的为执行中可能会出现异常的代码.如果当中的代码在执行时出现异常,就会通过或人工定义(使用throw)或系统自动生成并抛出异常对象.<br><strong>注意:</strong>当try{}代码块中执行时出现异常,抛出异常对象,下面的代码就不会执行了.<br><strong>catch(){}:</strong><br>catch(){}的小括号中为参数,参数应为对应try{}抛出异常对象的异常类或其父类.其大括号中为针对此异常的处理代码.当try{}抛出异常,由catch(){}捕获并处理.<br>这里因为对应的try{}可能抛出多种异常,可以一个try{}对应多个catch(){}.当然,()中对应的应为对应的每种异常类,而且遵从子类异常优先,父类异常殿后的顺序.<br><strong>注意:</strong>JDK7的新特性,可以在catch(){}的参数中同时对应多个异常类,用|分割.</p>
<p><strong>finally{}:</strong><br>finally{}的大括号中放入的代码,无论try{}是否抛出异常catch(){}是否执行,它都会执行.一般用于关闭资源操作.<br><strong>注意:</strong>有几个特殊情况<br><strong>1.</strong>如果在try{}和catch(){}中出现了System.exit(0)语句,那就没办法,不执行了.<br><strong>2.</strong>如果try{},catch(){}中出现了return语句,则finally{}中代码和return代码同时执行.<br><strong>3.</strong>如果2中finally{}中也出现了return语句,那么先前的return语句会被finally{}中的return语句覆盖执行.</p>
<p><strong>我的测试代码</strong>:</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//代码体现</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">demoMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用方法中声明了异常,这里必须处理或者上抛.(这里我上抛,没处理)</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//方法中的异常处理方式.</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demoMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果方法中可能抛出异常,而没有对应的try-catch处理,那么就可以用throws向调用者声明,方法中会出现异常,由调用者处理.</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/*
             * 运行可能会出现异常的代码.
             */</span>        
            <span class="token comment" spellcheck="true">//if()的括号中为认为定义应该抛出某个异常的条件</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抛出某一异常对象.</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/*
             *  对应捕获到的异常进行的处理.
             */</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/*
             * 必然会执行的代码.例如:关闭资源.删除临时文件.
             */</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(感觉自己最近为了赶进度,很久没有总结回顾以前的知识,今天开始要深刻反思)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;异常&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-1-异常概念：就是程序出现的不正常情况。&quot;&gt;&lt;a href=&quot;#1-1-异常概念：就是程序出现的不正常情况。&quot; class=&quot;headerlink&quot; title=&quot;1.1.异常概念：就是程序出现的不正常情况。&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.1.异常概念：&lt;/strong&gt;就是程序出现的不正常情况。&lt;/h2&gt;&lt;h2 id=&quot;1-2-异常体系&quot;&gt;&lt;a href=&quot;#1-2-异常体系&quot; class=&quot;headerlink&quot; title=&quot;1.2.异常体系:&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.2.异常体系:&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Throwable类&lt;/p&gt;
&lt;p&gt;|–Error类 严重的问题，是处理不了的。要改正代码的。&lt;br&gt;|–Exception类 非RuntimeException的，是需要处理的。编译期异常。&lt;/p&gt;
&lt;p&gt;|–RuntimeException类 不需要处理的，是需要改代码的。运行期异常。&lt;/p&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="笔记" scheme="http://gaoll.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JAVA" scheme="http://gaoll.top/tags/JAVA/"/>
    
      <category term="基础" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-集合补充(Map类)</title>
    <link href="http://gaoll.top/2014/01/02/%E9%9B%86%E5%90%88%E8%A1%A5%E5%85%85(Map%E7%B1%BB)/"/>
    <id>http://gaoll.top/2014/01/02/集合补充(Map类)/</id>
    <published>2014-01-02T15:28:00.000Z</published>
    <updated>2017-08-24T07:52:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Map类"><a href="#1-Map类" class="headerlink" title="1.Map类"></a><strong>1.Map类</strong></h2><p><strong>(Map集合中,以键值对的形式保存映射关系.)</strong></p>
<hr>
<h3 id="1-1-分类"><a href="#1-1-分类" class="headerlink" title="1.1.分类:"></a><strong>1.1.分类:</strong></h3><p><strong>按照键的保证唯一方式不同,分为两大类:</strong></p>
<p><strong>HashMap:通过键的hashCode()方法和equals()方法来保证唯一.</strong></p>
<a id="more"></a>
<p><strong>注意:</strong></p>
<p><strong>HashMap和Hashtable的区别在于,HashMap中任何对象,包括null都可以作为键值</strong><br><strong>而Hashtable中只有非null对象可以作为键值</strong></p>
<p><strong>TreeMap:通过键的compareTo()方法来保证唯一.</strong><br><strong>注意:</strong></p>
<p><strong>这里实现比较,达到二叉树的方法有两种,一种是在集合中元素的对象中实现compareTo()方法.</strong><br><strong>一种是在定义TreeMap时在参数列表中给定一个Comparator对象.</strong></p>
<hr>
<h3 id="1-2-HashMap类"><a href="#1-2-HashMap类" class="headerlink" title="1.2.HashMap类"></a><strong>1.2.HashMap类</strong></h3><p><strong><img src="http://img.blog.csdn.net/20140102231243796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<p><strong><img src="http://img.blog.csdn.net/20140102231259953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong><br><strong>1.3.案例:统计字符串字符出现次数</strong></p>
<p><strong>我的代码</strong></p>
<pre><code>    package demo;

/*
需求：获取一个字符串中出现的字母及其出现次数。
分析：字符串每位上的字符进行遍历，然后将每位上的字符添加入定义好的一个Map集合。存储动作时加上判断，如果集合中不存在该键(字符作键)，添加该键值(字符,1),如果存在则值加1.
步骤:
1.键盘获取一个字符串对象.
2.定义一个Map,遍历字符串,将每一位上的字符当作键,存入Map集合。
3.存储都做加上判断，集合中没有，则值为1，存入。集合中有，则将已有值加一存入。
4.遍历Map集合并打印，达到要求格式。
*/
import java.util.Map;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;
class ApearNum
{
    public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);
        System.out.println(&quot;请输入需要获取出现字母及其次数的字符串：&quot;);
        String str = in.nextLine();
        TreeMap &lt;Character,Integer&gt; strMap = new TreeMap&lt;&gt;();
        for(int i=0;i&lt;str.length();i++)        //这里，突然想到增强for，适用于集合和数组，但不论从哪方面来说，String我都觉得他足够具有特殊性。
        //for(Character str.charAt(i) : str)        //所以这里,对增强for是否适用于String,进行了实验,事实证明,不行.
        //for(Character charI : str)
        {
            //Character temp =charI;
            Character temp=str.charAt(i);
            if(strMap.get(temp)==null)
            {
                strMap.put(temp,1);
            }
            else
            {
                strMap.put(temp,strMap.get(temp)+1);
            }
        }
        System.out.println(strMap);
        //TreeSet &lt;Character&gt; strSet = (TreeSet)strMap.keySet();   这里，运行出现类型转换异常，可以得知，keySet()得到的键集合是与Map对应的类型.
        //TreeSet &lt;Character&gt; strSet =(TreeSet)strMap.keySet();    为什么这里,我已经将Map改成TreeMap还是类型转换异常?
        //通过查看底层源码得知:虽然键集合的确符合TreeSet或者HashSet集合的特性,但他其实是SortedSet的一个子类,并不是想当然的是HashSet或者TreeSet.
        Set &lt;Character&gt;    strSet = strMap.keySet();
        StringBuilder strSB = new StringBuilder();
        for(Character key : strSet)
        {
            strSB.append(&quot;[&quot;).append(key+&quot;:&quot;).append(strMap.get(key)).append(&quot;] &quot;);
        }
        System.out.println(strSB);
    }
}
</code></pre><h3 id="1-4-总结Map"><a href="#1-4-总结Map" class="headerlink" title="1.4.总结Map"></a><strong>1.4.总结Map</strong></h3><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a><strong>HashMap</strong></h3><p><strong>底层数据结构是哈希表。线程不安全，效率高。它依赖两个方法：hashCode()和equals()保证唯一性.</strong> <strong>顺序：
</strong> <strong>首先判断hashCode()值是否相同。
</strong> <strong>同：继续走equals()，看返回值
</strong> 如果true：就不添加到集合。<br> 如果false：就添加到集合。</p>
<p><strong>不同：就添加到集合。</strong></p>
<h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a><strong>Hashtable</strong></h3><p><strong>(注意,这里table为小写,因为Hashtable在早起jdk版本存在<br>底层数据结构是哈希表。线程安全，效率低。它依赖两个方法：hashCode()和equals())保证唯一性.**</strong>顺序：<br><strong><strong>首先判断hashCode()值是否相同。
</strong></strong>同：继续走equals()，看返回值<br><strong>如果true：就不添加到集合。<br>如果false：就添加到集合。
</strong>不同：就添加到集合。**</p>
<h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a><strong>TreeMap</strong></h3><p><strong>底层数据结构是二叉树。线程不安全，效率高。根据返回是否是0保证唯一性。
</strong>自然排序(元素具备比较性)<strong>:实现Comparable接口
</strong>比较器排序(集合具备比较性)**:实现Comparator接口</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Map类&quot;&gt;&lt;a href=&quot;#1-Map类&quot; class=&quot;headerlink&quot; title=&quot;1.Map类&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.Map类&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;(Map集合中,以键值对的形式保存映射关系.)&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-1-分类&quot;&gt;&lt;a href=&quot;#1-1-分类&quot; class=&quot;headerlink&quot; title=&quot;1.1.分类:&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.1.分类:&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;按照键的保证唯一方式不同,分为两大类:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HashMap:通过键的hashCode()方法和equals()方法来保证唯一.&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="笔记" scheme="http://gaoll.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="基础" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="教程" scheme="http://gaoll.top/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-集合框架2</title>
    <link href="http://gaoll.top/2013/12/28/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B62/"/>
    <id>http://gaoll.top/2013/12/28/集合框架2/</id>
    <published>2013-12-28T05:59:00.000Z</published>
    <updated>2017-08-24T07:54:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Set类"><a href="#1-Set类" class="headerlink" title="1.Set类"></a>1.Set类</h2><h3 id="1-1Set的特点："><a href="#1-1Set的特点：" class="headerlink" title="1.1Set的特点："></a>1.1Set的特点：</h3><p>元素无序,唯一。<br>注意：这里的顺序是指存储和取出顺序。</p>
<h2 id="2-HashSet"><a href="#2-HashSet" class="headerlink" title="2.HashSet"></a>2.HashSet</h2><h3 id="2-1-HashSet：不保证元素的迭代顺序。并且，不保证该顺序恒久不变。"><a href="#2-1-HashSet：不保证元素的迭代顺序。并且，不保证该顺序恒久不变。" class="headerlink" title="2.1.HashSet：不保证元素的迭代顺序。并且，不保证该顺序恒久不变。"></a>2.1.HashSet：不保证元素的迭代顺序。并且，不保证该顺序恒久不变。</h3><h3 id="2-2-怎么保证元素唯一"><a href="#2-2-怎么保证元素唯一" class="headerlink" title="2.2.怎么保证元素唯一"></a>2.2.怎么保证元素唯一</h3><p><strong>HashSet底层数据结构是哈希表。</strong><br>依赖两个方法：hashCode()和equals()<br>顺序：<br><strong>首先，判断hashCode()值是否相同。</strong><br>相同：<br>继续走equals()方法，根据其返回值：<br>true：说明元素重复，不添加到集合。<br>false：说明元素不重复，添加到集合。<br>不同：直接添加到集合。</p>
<a id="more"></a>
<h3 id="2-3-如何重写hashCode-和equals-方法"><a href="#2-3-如何重写hashCode-和equals-方法" class="headerlink" title="2.3.如何重写hashCode()和equals()方法"></a>2.3.如何重写hashCode()和equals()方法</h3><p><strong>hashCode():</strong><br>把对象的所有成员变量值相加即可。<br>如果是基本类型，就加值。如果是引用类型，就加哈希值。<br><strong>equals():</strong><br><strong>A:</strong>this==obj<br><strong>B</strong>:!(obj instanceof Student)</p>
<p><strong>C:</strong>所有成员变量的值比较。基本类型用==,引用类型用equals()。</p>
<p>我的代码:</p>
<pre><code>    public int hashCode(){
        //根据自己的需求定义hashCode的算法.
        return name.hashCode()+age*17;
    }
    public void equals&lt;Object&gt;(Object obj){
        if(this==obj){
            return true;
        }else if(!(obj intstanceof Student)){
            return false;
        }else{
            return (obj.getName().equals(name) &amp;&amp; obj.getAge==age)?true:false;
</code></pre><h3 id="2-4-案例"><a href="#2-4-案例" class="headerlink" title="2.4.案例"></a>2.4.案例</h3><p>HashSet存储字符串并遍历<br>HashSet存储自定义对象并遍历<br>针对自定义对象：<br>需求：如果对象的成员都相同，就认为是同一个元素。</p>
<h2 id="3-TreeSet"><a href="#3-TreeSet" class="headerlink" title="3.TreeSet"></a>3.TreeSet</h2><h3 id="3-1-TreeSet：根据构造方法的不用，选择使用自然排序或者比较器排序。"><a href="#3-1-TreeSet：根据构造方法的不用，选择使用自然排序或者比较器排序。" class="headerlink" title="3.1.TreeSet：根据构造方法的不用，选择使用自然排序或者比较器排序。"></a>3.1.TreeSet：根据构造方法的不用，选择使用自然排序或者比较器排序。</h3><pre><code>    按照实际的需求，可以对元素进行排序。并且保证唯一。
</code></pre><h3 id="3-2-如何保证"><a href="#3-2-如何保证" class="headerlink" title="3.2.如何保证"></a>3.2.如何保证</h3><p><strong>排序：</strong></p>
<p>底层结构是二叉树。按照树节点进行存储和取出。<br>两种实现：<br><strong>A:自然排序(元素具备比较性)</strong><br>TreeSet的无参构造，要求对象所属的类实现Comparable接口。<br><strong>B:比较器排序(集合具备比较性)</strong><br>TreeSet的带参构造，要求构造方法接收一个实现了Comparator接口的对象。</p>
<p><strong>唯一</strong>：根据返回值是否为0。</p>
<p><strong>注意：
</strong></p>
<p><strong>如果同时有两种方案，以比较器为主。</strong></p>
<p><strong>我的代码:</strong></p>
<pre><code>    //TreeSet底层是二叉树,所以是通过比较来comparaTo方法来判断元素的是否唯一.
    //对于需要存储进集合的元素,通过其自身的comparaTo方法来跟集合中已经存在的元素进行比较运算,返回值为int型数据,为0,则不加入集合,为负数,则反向加入,为正数则正向加入.
    //对于基本类型数据元素,因为其父类实现了Comparable接口,所以必然覆盖了comparaTo方法,可以不定义,直接调用compareTo进行比较.
    //对于自定义类,因为类中未定义comparaTo方法或者未实现Comparable接口,则需要自己在类中来实现ComparaTo接口,重写compareTo方法.方法中具体内容根据实际要求编写.或者在建立这个TreeSet时,就根据其构造函数传入一个自己定义的比较器.
        class Student implements Comparable{
            public int compareTo(Student stu){
                int num1 = this.name.length()-stu.name.length();
                int num2 = this.name.compareTo(stu.name);
                int num3 = this.age-stu.age;
                return (num1==0&amp;&amp;num2==0)?num3(num1==0)?num2:num1;
            }
        }
</code></pre><h3 id="3-3-案例"><a href="#3-3-案例" class="headerlink" title="3.3.案例"></a>3.3.案例</h3><p>TreeSet存储字符串并遍历<br>TreeSet存储Integer并遍历<br>TreeSet存储自定义对象并遍历</p>
<h2 id="4-Collection体现的集合总结"><a href="#4-Collection体现的集合总结" class="headerlink" title="4.Collection体现的集合总结"></a>4.Collection体现的集合总结</h2><p>Collection<br>|–List<br>|–ArrayList<br>底层数据结构是数组，查询快，增删慢<br>线程不安全，效率高。<br>|–LinkedList<br>底层数据结构是链表，查询慢，增删快<br>线程不安全，效率高。<br>|–Vector<br>底层数据结构是数组，查询快，增删慢<br>线程安全，效率低。<br>|–Set 唯一<br>|–HashSet<br>底层数据结构是哈希表。<br>如何保证元素唯一性呢?<br>依赖两个方法。hashCode()和equals()。<br>以后都自动生成。<br>|–TreeSet</p>
<p>底层数据结构是二叉树。</p>
<p><strong>如何保证元素唯一性呢?如何保证元素排序呢?</strong><br>根据返回值是否是0，判断元素是否重复。<br>排序有两种方案：<br>元素具备比较性 实现Comparable接口<br>集合具备比较性 实现Comparator接口</p>
<h2 id="5-集合中的数据结构"><a href="#5-集合中的数据结构" class="headerlink" title="5.集合中的数据结构"></a>5.集合中的数据结构</h2><p><strong>ArrayXxx:</strong>底层数据结构是数组。查询快，增删慢。<br><strong>LinkedXxx</strong>:底层数据结构是链表。查询慢，增删快。<br><strong>HashXxx:</strong>底层数据结构是哈希表。跟两个有关。hashCode()和equals()<br><strong>TreeXxx:</strong>底层数据结构是二叉树。两种排序方式。Comparable接口和Comparator接口</p>
<h2 id="6-如何选择Collection集合"><a href="#6-如何选择Collection集合" class="headerlink" title="6.如何选择Collection集合"></a>6.如何选择Collection集合</h2><p><strong>元素是否唯一?</strong><br><strong>唯一：</strong><br>Set<br>元素是否排序?<br>需要：TreeSet<br>不需要：HashSet<br>不知道是否排序，用HashSet。<br><strong>不唯一：</strong><br>List<br>需要安全码?<br>需要：Vector<br>不需要：ArrayList和LinkedList<br>查询多：ArrayList<br>增删多；LinkedList<br>不知道，用ArrayList。</p>
<h2 id="7-Collections"><a href="#7-Collections" class="headerlink" title="7.Collections"></a>7.Collections</h2><h3 id="7-1-Collections是针对Collection集合操作的工具类。"><a href="#7-1-Collections是针对Collection集合操作的工具类。" class="headerlink" title="7.1.Collections是针对Collection集合操作的工具类。"></a>7.1.Collections是针对Collection集合操作的工具类。</h3><h3 id="7-2-面试题"><a href="#7-2-面试题" class="headerlink" title="7.2.面试题"></a>7.2.面试题</h3><p><strong>Collection</strong>和<strong>Collections</strong>的区别:</p>
<p>一个是Collection,集合体系不断向上抽取,最终得到的该体系的顶层类,定义了所有集合的共性内容.</p>
<p>一个是Collections,是一个类似于Arrays的静态工厂,基本上都是静态方法,是一个工具类.对集合进行加工.</p>
<h3 id="7-3功能"><a href="#7-3功能" class="headerlink" title="7.3功能"></a>7.3功能</h3><p><img src="http://img.blog.csdn.net/20131228135245656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<p><strong>———–</strong><a href="">android培训</a><strong>、</strong><a href="">java培训</a><strong>、java学习型技术博客、期待与您交流！ ————</strong></p>
<p><strong>**详情请查看：</strong><a href="">http://edu.csdn.net/</a><br>**</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Set类&quot;&gt;&lt;a href=&quot;#1-Set类&quot; class=&quot;headerlink&quot; title=&quot;1.Set类&quot;&gt;&lt;/a&gt;1.Set类&lt;/h2&gt;&lt;h3 id=&quot;1-1Set的特点：&quot;&gt;&lt;a href=&quot;#1-1Set的特点：&quot; class=&quot;headerlink&quot; title=&quot;1.1Set的特点：&quot;&gt;&lt;/a&gt;1.1Set的特点：&lt;/h3&gt;&lt;p&gt;元素无序,唯一。&lt;br&gt;注意：这里的顺序是指存储和取出顺序。&lt;/p&gt;
&lt;h2 id=&quot;2-HashSet&quot;&gt;&lt;a href=&quot;#2-HashSet&quot; class=&quot;headerlink&quot; title=&quot;2.HashSet&quot;&gt;&lt;/a&gt;2.HashSet&lt;/h2&gt;&lt;h3 id=&quot;2-1-HashSet：不保证元素的迭代顺序。并且，不保证该顺序恒久不变。&quot;&gt;&lt;a href=&quot;#2-1-HashSet：不保证元素的迭代顺序。并且，不保证该顺序恒久不变。&quot; class=&quot;headerlink&quot; title=&quot;2.1.HashSet：不保证元素的迭代顺序。并且，不保证该顺序恒久不变。&quot;&gt;&lt;/a&gt;2.1.HashSet：不保证元素的迭代顺序。并且，不保证该顺序恒久不变。&lt;/h3&gt;&lt;h3 id=&quot;2-2-怎么保证元素唯一&quot;&gt;&lt;a href=&quot;#2-2-怎么保证元素唯一&quot; class=&quot;headerlink&quot; title=&quot;2.2.怎么保证元素唯一&quot;&gt;&lt;/a&gt;2.2.怎么保证元素唯一&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;HashSet底层数据结构是哈希表。&lt;/strong&gt;&lt;br&gt;依赖两个方法：hashCode()和equals()&lt;br&gt;顺序：&lt;br&gt;&lt;strong&gt;首先，判断hashCode()值是否相同。&lt;/strong&gt;&lt;br&gt;相同：&lt;br&gt;继续走equals()方法，根据其返回值：&lt;br&gt;true：说明元素重复，不添加到集合。&lt;br&gt;false：说明元素不重复，添加到集合。&lt;br&gt;不同：直接添加到集合。&lt;/p&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="笔记" scheme="http://gaoll.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JAVA" scheme="http://gaoll.top/tags/JAVA/"/>
    
      <category term="基础" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-集合框架1</title>
    <link href="http://gaoll.top/2013/12/26/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B61/"/>
    <id>http://gaoll.top/2013/12/26/集合框架1/</id>
    <published>2013-12-25T16:45:00.000Z</published>
    <updated>2017-08-24T07:52:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-集合"><a href="#1-集合" class="headerlink" title="1.集合"></a><strong>1.集合</strong></h2><h3 id="1-1-集合概念"><a href="#1-1-集合概念" class="headerlink" title="1.1.集合概念"></a><strong>1.1.集合概念</strong></h3><p><strong>java是一种面向对象语言，如果我们要针对多个对象进行操作，就必须对多个对象进行存储。而对多个元素进行存储，前面我们学习过数组，数组的弊端，长度固定。这样，数组将不能满足变化的要求。所以，java提供了集合供我们使用。</strong></p>
<a id="more"></a>
<h3 id="1-2-集合的特点："><a href="#1-2-集合的特点：" class="headerlink" title="1.2.集合的特点："></a><strong>1.2.集合的特点：</strong></h3><p><strong>A:长度可以发生改变<br>B:只能存储对象<br>C:可以存储多种类型对象(一般存储的还是同一种)</strong></p>
<h3 id="1-3-集合和数组的区别"><a href="#1-3-集合和数组的区别" class="headerlink" title="1.3.集合和数组的区别"></a><strong>1.3.集合和数组的区别</strong></h3><p>A:长度问题<br>数组固定<br>集合可变<br>B:存储元素问题<br>数组可以是基本类型，也可以是引用类型。<br>集合只能是引用类型。<br>C:元素是否为同一类型<br>数组元素类型一致。<br>集合元素类型可以不一致。</p>
<h3 id="1-4-集合体现的由来"><a href="#1-4-集合体现的由来" class="headerlink" title="1.4.集合体现的由来"></a><strong>1.4.集合体现的由来</strong></h3><p><strong>集合是存储多个元素的容器，但是，由于数据结构不同，java就提供了多种集合类。而这多种集合类有共性的功能，所以，通过不断的向上抽取，最终形成了集合体系结构。</strong></p>
<h3 id="1-5-数据结构：数据存储的方式"><a href="#1-5-数据结构：数据存储的方式" class="headerlink" title="1.5.数据结构：数据存储的方式"></a><strong>1.5.数据结构：数据存储的方式</strong></h3><p>Collection<br>|–List<br>|–ArrayList<br>|–Vector<br>|–LinkedList<br>|–Set<br>|–HashSet<br>|–TreeSet</p>
<h3 id="1-6-如何学习和使用一个继承体系"><a href="#1-6-如何学习和使用一个继承体系" class="headerlink" title="1.6.如何学习和使用一个继承体系"></a><strong>1.6.如何学习和使用一个继承体系</strong></h3><p><strong>学习顶层：因为顶层定义的是共性内容。<br>使用底层：因为底层才是具体的实现。</strong></p>
<hr>
<h2 id="2-Collection的功能"><a href="#2-Collection的功能" class="headerlink" title="2.Collection的功能"></a><strong>2.Collection的功能</strong></h2><h3 id="2-1Collection的功能"><a href="#2-1Collection的功能" class="headerlink" title="2.1Collection的功能"></a><strong>2.1Collection的功能</strong></h3><p><strong><img src="http://img.blog.csdn.net/20131228130822937?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></strong></p>
<p><strong><img src="http://img.blog.csdn.net/20131228130834296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></strong></p>
<h3 id="2-2-迭代器的使用"><a href="#2-2-迭代器的使用" class="headerlink" title="2.2.迭代器的使用"></a><strong>2.2.迭代器的使用</strong></h3><p><strong>A:使用步骤<br>a:通过集合对象获取迭代器对象。<br>b:通过迭代器对象判断。<br>c:通过迭代器对象获取。</strong><br><strong>B:迭代器原理<br>由于多种集合的数据结构不同，所以存储方式不同，所以，取出方式也不同。<br>这个时候，我们就把判断和获取功能定义在了一个接口中，将来，遍历哪种<br>集合的时候，只要该集合内部实现这个接口即可。</strong></p>
<p><strong>C:迭代器源码</strong><br><strong>(自己的分析)</strong></p>
<p><strong><img src="http://img.blog.csdn.net/20131228130910218?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br><img src="http://img.blog.csdn.net/20131228130927218?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<h3 id="2-3-集合的常见使用步骤："><a href="#2-3-集合的常见使用步骤：" class="headerlink" title="2.3.集合的常见使用步骤："></a>2.3.集合的常见使用步骤：</h3><p>A:创建集合对象<br>B:创建元素对象<br>C:把元素添加到集合中<br>D:遍历集合<br>a:通过集合对象获取迭代器对象。<br>b:通过迭代器对象判断。<br>c:通过迭代器对象获取。</p>
<h3 id="2-4-Collection存储并遍历。"><a href="#2-4-Collection存储并遍历。" class="headerlink" title="2..4.Collection存储并遍历。"></a><strong>2..4.Collection存储并遍历。</strong></h3><hr>
<h2 id="3-List的特有功能-掌握"><a href="#3-List的特有功能-掌握" class="headerlink" title="3.List的特有功能(掌握)"></a><strong>3.List的特有功能(掌握)</strong></h2><h3 id="3-1-List的特有功能"><a href="#3-1-List的特有功能" class="headerlink" title="3.1.List的特有功能"></a><strong>3.1.List的特有功能</strong></h3><p><strong><img src="http://img.blog.csdn.net/20131228131008765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></strong></p>
<h3 id="3-2-List的遍历方式"><a href="#3-2-List的遍历方式" class="headerlink" title="3.2.List的遍历方式"></a><strong>3.2.List的遍历方式</strong></h3><p><strong>A:Iterator迭代器<br>B:ListIterator迭代器<br>C:普通for</strong></p>
<h3 id="3-3-ListIterator迭代器"><a href="#3-3-ListIterator迭代器" class="headerlink" title="3.3.ListIterator迭代器"></a><strong>3.3.ListIterator迭代器</strong></h3><p><strong>A:是Iterator的子接口。<br>B:有自己的特有功能，可以逆向遍历数据，但是需要先正向遍历。一般不用。</strong></p>
<h3 id="3-4-面试题：并发修改异常"><a href="#3-4-面试题：并发修改异常" class="headerlink" title="3.4.面试题：并发修改异常"></a><strong>3.4.面试题：并发修改异常</strong></h3><p>A:并发修改异常的产生原因<br>用迭代器遍历集合，用集合去\操作集合。<br>B:解决方案：<br>a:使用集合操作。<br>b:使用列表迭代器操作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-集合&quot;&gt;&lt;a href=&quot;#1-集合&quot; class=&quot;headerlink&quot; title=&quot;1.集合&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.集合&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-1-集合概念&quot;&gt;&lt;a href=&quot;#1-1-集合概念&quot; class=&quot;headerlink&quot; title=&quot;1.1.集合概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.1.集合概念&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;java是一种面向对象语言，如果我们要针对多个对象进行操作，就必须对多个对象进行存储。而对多个元素进行存储，前面我们学习过数组，数组的弊端，长度固定。这样，数组将不能满足变化的要求。所以，java提供了集合供我们使用。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="笔记" scheme="http://gaoll.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JAVA" scheme="http://gaoll.top/tags/JAVA/"/>
    
      <category term="基础" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-常用API应用(持续跟新)</title>
    <link href="http://gaoll.top/2013/12/22/%E5%B8%B8%E7%94%A8API%E5%BA%94%E7%94%A8/"/>
    <id>http://gaoll.top/2013/12/22/常用API应用/</id>
    <published>2013-12-21T17:15:00.000Z</published>
    <updated>2017-08-24T07:54:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>常用API总结.</p>
<h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><p><img src="http://img.blog.csdn.net/20131228125139453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p><img src="http://img.blog.csdn.net/20131228125200203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<a id="more"></a>
<h2 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a><strong>StringBuffer类</strong></h2><p><img src="http://img.blog.csdn.net/20131228125328218?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p><img src="http://img.blog.csdn.net/20131228125349078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="Integer类"><a href="#Integer类" class="headerlink" title="Integer类"></a><strong>Integer类</strong></h2><p><strong><img src="http://img.blog.csdn.net/20131228125430343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<p><strong><img src="http://img.blog.csdn.net/20131228125452625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<hr>
<h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a><strong>System类</strong></h2><p><strong><img src="http://img.blog.csdn.net/20131228125531968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<hr>
<h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a><strong>Arrays类</strong></h2><p><strong><img src="http://img.blog.csdn.net/20131228125619687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<hr>
<h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a><strong>Date类</strong></h2><p><img src="http://img.blog.csdn.net/20131228125726390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a><strong>DateFormat类</strong></h2><p><strong><img src="http://img.blog.csdn.net/20131228125806500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></strong></p>
<hr>
<h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><p><img src="http://img.blog.csdn.net/20131228125845515?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="Collection类"><a href="#Collection类" class="headerlink" title="Collection类"></a><strong>Collection类</strong></h2><p><strong><img src="http://img.blog.csdn.net/20131228125925968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<p><strong><img src="http://img.blog.csdn.net/20131228125948296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<hr>
<h2 id="Collections类"><a href="#Collections类" class="headerlink" title="Collections类"></a>Collections类</h2><p><img src="http://img.blog.csdn.net/20131228130014437?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="Iterator类"><a href="#Iterator类" class="headerlink" title="Iterator类"></a><strong>Iterator类</strong></h2><p><strong><img src="http://img.blog.csdn.net/20131228130125875?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<p><strong><img src="http://img.blog.csdn.net/20131228130139703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<hr>
<h2 id="List类"><a href="#List类" class="headerlink" title="List类"></a><strong>List类</strong></h2><p><strong><img src="http://img.blog.csdn.net/20131228130225828?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<hr>
<h2 id="HashMap类"><a href="#HashMap类" class="headerlink" title="HashMap类"></a><strong>HashMap类</strong></h2><p><strong><img src="http://img.blog.csdn.net/20140102225610453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<p><strong><img src="http://img.blog.csdn.net/20140102225633218?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<hr>
<h2 id="Map-Entry类-内部类"><a href="#Map-Entry类-内部类" class="headerlink" title="Map.Entry类(内部类)"></a><strong>Map.Entry类(内部类)</strong></h2><p><strong><img src="http://img.blog.csdn.net/20140102225724750?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<hr>
<h2 id="Stack类"><a href="#Stack类" class="headerlink" title="Stack类"></a><strong>Stack类</strong></h2><p><strong><img src="http://img.blog.csdn.net/20140102225801312?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<hr>
<h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a><strong>File类</strong></h2><p><strong><img src="http://img.blog.csdn.net/20140102225849875?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<p><strong><img src="http://img.blog.csdn.net/20140102225905296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<hr>
<h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a><strong>Class类</strong></h2><p><strong><img src="http://img.blog.csdn.net/20140106222755015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<p><strong><img src="http://img.blog.csdn.net/20140106222814375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong><br><strong><img src="http://img.blog.csdn.net/20140106222829687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">
</strong></p>
<p><strong>To be continue……</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用API总结.&lt;/p&gt;
&lt;h2 id=&quot;String类&quot;&gt;&lt;a href=&quot;#String类&quot; class=&quot;headerlink&quot; title=&quot;String类&quot;&gt;&lt;/a&gt;String类&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20131228125139453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20131228125200203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="笔记" scheme="http://gaoll.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="基础" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="api" scheme="http://gaoll.top/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-Java基础语法收尾</title>
    <link href="http://gaoll.top/2013/12/19/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E6%94%B6%E5%B0%BE/"/>
    <id>http://gaoll.top/2013/12/19/Java基础语法收尾/</id>
    <published>2013-12-18T17:35:00.000Z</published>
    <updated>2017-08-24T08:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Eclipse的使用-掌握"><a href="#1-Eclipse的使用-掌握" class="headerlink" title="1.Eclipse的使用(掌握)"></a>1.Eclipse的使用(掌握)</h2><p><strong>1.1安装</strong></p>
<p>A:解压<br>B:复制到指定的目录(不要有中文,和其他非法字符)<br><strong>1.2使用</strong><br>A:打开软件的界面<br>B:新建一个项目(工程)<br>C:在项目下的src(源码包)下建立包<br>D:在包下建立类<br>E:在类里边写代码<br>F:编译源文件(代码写完保存的时候会自动生成class文件，在项目的bin目录下。)<br>G:执行class文件(右键 – Run As – Java Application)<br>H:结果显示在Console控制台上<br><strong>1.3如何汉化</strong><br>A:找到汉化的插件<br>B:把eclipse_zh复制到D:\develop\eclipse\dropins目录下<br><strong>1.4如何显示行号</strong><br>在代码最左侧前面，右键-  Show Line Numbers<br><strong>1.5如何修改字体<br>A：</strong>java代码字体<br>Window – Preferences – Appearance – Colors and Fonts – Java– Java Editor–  选择右边的Edit进行修改即可。<br><strong>B：</strong>其他字体<br>Window – Preferences – Appearance – Colors and Fonts – Basic  – …<br><strong>1.6如果不小心把界面给弄没了</strong><br>不要担心有复位操作。<br>window – reset …<br><strong>1.7快捷键</strong><br>A:内容辅助键<br>alt+/<br>main方法：先写main然后alt+/最后Enter<br>输出语句：先写syso然后alt+/最后Enter<br>B:快捷键<br>ctrl+shift+o 对使用了其他包中的类或者接口进行自动导入<br>注意：如果只有一个包中有这个类，会自动导入。<br>     如果多个包中有这个类，会弹出一个框供你选择。<br>ctrl+shift+f 对代码进行格式化<br>注意：有些时候，编译器失灵了。快捷键格式化不起作用了。<br>解决：右键–source–format<br>看源码：<br>选中类：F3或者Ctrl+鼠标点击<br><strong>1.8帮助你生成代码</strong><br>找到source。<br><strong>A</strong>：生成构造方法<br><strong>B</strong>：生成get/set方法<br><strong>C</strong>：@Override<br>注解。<br>告诉你，该方法就是重写父类或者父接口的。<br><strong>1.9删除项目</strong><br>步骤：<br>选中项目 – 右键delete …<br>A:从工作台中删除<br>B:从硬盘删除<br>区别：就是在删除的时候，有一个选项你是否选择了。<br><strong>1.10：导入项目</strong><br>在项目所在位置的空白处右键 – Import – General – Existing …(最长的那个)<br>–browse 选择你项目的所在位置 – 最后Finish即可。<br><strong>1.11断点调试(必须掌握)</strong><br>看程序的执行流程。<br>以及变量的变化过程。<br><strong>A:</strong>如何加断点<br>在你想看从哪里执行的程序的左边双击即可。(不要在注释上做)<br>在哪里加?<br>哪里不会加哪里。<br>最好在每个方法的第一条语句上加。<br>B:如何使用<br>右键 – Debug Aa – Java Application<br>弹出一个界面问你：<br>是否打开调试界面。yes<br>是否记住我的选择。选中框框即可<br><strong>C:</strong>查看哪里<br>左边：<br>程序运行到哪里了<br>右边：<br>变量的变化过程<br><strong>D:</strong>怎么继续<br>F6 执行一行。E:去除断点<br>方式1：在点击的那个地方再次点击<br>方式2：在debug调试界面–BreakPoints – remove All… </p>
<h2 id="2-Object类的方法-理解"><a href="#2-Object类的方法-理解" class="headerlink" title="2.Object类的方法(理解)"></a>2.Object类的方法(理解)</h2><h3 id="2-1类层次结构的顶层类"><a href="#2-1类层次结构的顶层类" class="headerlink" title="2.1类层次结构的顶层类"></a>2.1类层次结构的顶层类</h3><p>是所有类的根类，超类。</p>
<p>所有的类都直接或者间接的继承自Object类。</p>
<h3 id="2-2Object类的方法："><a href="#2-2Object类的方法：" class="headerlink" title="2.2Object类的方法："></a>2.2Object类的方法：</h3><p>A:toString()</p>
<p>public String toString():返回对象的字符串表示形式。</p>
<p>组成：包名…类名@哈希值的十六进制</p>
<p>B:equals()</p>
<p>public boolean equals(Object obj):</p>
<p>默认比较的是对象的地址值是否相同。</p>
<p>一般，会重写该方法。按照自己ide需求进行比较。</p>
<h3 id="2-3面试题："><a href="#2-3面试题：" class="headerlink" title="2.3面试题："></a>2.3面试题：</h3><p><strong>==和equals()的区别?</strong></p>
<p><strong>==:</strong></p>
<p>比较基本类型：比较的是基本类型的值是否相同。</p>
<p>比较引用类型：比较的是引用类型的地址值是否相同。</p>
<p><strong>equals():</strong></p>
<p>比较引用类型，默认比较的是引用类型的地址值是否相同。</p>
<p>如果类重写了该方法，那就得按照重写后的规则进行比较。</p>
<p>代码:</p>
<pre><code>    /*
 * A:字符串一旦初始化就不可以被改变
 *         注意：这里指的是字符串在常量池里面的值不能发生改变。而不是说字符串的引用不能变。
 * 
 * B:String s1 = new String(&quot;abc&quot;);String s2 = &quot;abc&quot;;有区别吗？
 *         有。
 *         第一种方式，其实在内存中有两个对象存在。
 *         第二种方式，在内存中只有一个对象存在。
 */
public class StringTest {
    public static void main(String[] args) {
        String s = &quot;hello&quot;;
        s += &quot;world&quot;;
        System.out.println(s); // helloworld
    }
}
</code></pre><h2 id="3-String类的equals方法源码解析"><a href="#3-String类的equals方法源码解析" class="headerlink" title="3.String类的equals方法源码解析"></a>3.String类的equals方法源码解析</h2><pre><code>    /*
 * 标准的学生类
 */
public class Student {
    private String name;
    private int age;

    public Student() {
    }

    public Student(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return &quot;Student [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;;
    }

    /*
     * 分析：
     *         返回值类型：boolean
     *         参数列表：两个年龄,int age1,int age2
     */
//    public boolean compare(int age1,int age2)
//    {
//        return age1==age2;
//    }

    //而我们现在学生的是面向对象的思想，一般来说，我们以后传参就会传递对象作为参数。
    //改进版
//    public boolean compare(Student s1,Student s2)
//    {
//        return s1.age == s2.age;
//    }

    //用this代替一个对象
//    public boolean compare(Student s)
//    {
//        /*
//         * this -- s1
//         * s -- s2
//         */
//        return this.age == s.age;
//    }

    @Override
    public boolean equals(Object obj) {
        //为了提高代码效率
        if(this==obj){
            return true;
        }

        //为了提高程序的健壮性
        //加一个判断：判断传递过来的对象是否是Student类型的。
        //怎么判断?
        //格式：对象名 instanceof 类名 判断对象是否是该类的对象,返回boolean类型
        if(!(obj instanceof Student)){
            return false;
        }

        /*
         * this -- s1
         * obj -- s2
         */
        Student s =  (Student)obj;
        //重写equals一般就是为了比较某个类的多个对象的所有成员变量值是否相同
        //如果成员变量是基本类型，就用==比较
        //如果成员变量时引用类型,就用该变量对应的引用类型的equals（）方法
        return this.age == s.age &amp;&amp; this.name.equals(s.name);
    }

//    @Override
//    public String toString(){
//        return &quot;name:&quot;+name+&quot;,age:&quot;+age;
//    }


}
</code></pre><hr>
<p><strong>———————–<a href="http://edu.csdn.net/heima/" target="_blank" rel="external">android培训</a>、<a href="http://edu.csdn.net/heima" target="_blank" rel="external">java培训</a>、java学习型技术博客、期待与您交流！———————-</strong></p>
<p><strong>详情请查看：<a href="http://edu.csdn.net/heima" target="_blank" rel="external">http://edu.csdn.net/</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Eclipse的使用-掌握&quot;&gt;&lt;a href=&quot;#1-Eclipse的使用-掌握&quot; class=&quot;headerlink&quot; title=&quot;1.Eclipse的使用(掌握)&quot;&gt;&lt;/a&gt;1.Eclipse的使用(掌握)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.1安装&lt;/s
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="笔记" scheme="http://gaoll.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="基础" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="教程" scheme="http://gaoll.top/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-Java面向对象4</title>
    <link href="http://gaoll.top/2013/12/16/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A14/"/>
    <id>http://gaoll.top/2013/12/16/Java面向对象4/</id>
    <published>2013-12-15T21:03:00.000Z</published>
    <updated>2017-08-24T08:27:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-包-掌握"><a href="#1-包-掌握" class="headerlink" title="1.包(掌握)"></a>1.包(掌握)</h2><h3 id="1-1包其实就是文件夹。"><a href="#1-1包其实就是文件夹。" class="headerlink" title="1.1包其实就是文件夹。"></a>1.1包其实就是文件夹。</h3><p>用于区分相同的类名。</p>
<h3 id="1-2格式："><a href="#1-2格式：" class="headerlink" title="1.2格式："></a>1.2格式：</h3><p>package 包名1.包名2…;</p>
<h3 id="1-3带包的编译和运行-了解"><a href="#1-3带包的编译和运行-了解" class="headerlink" title="1.3带包的编译和运行(了解)"></a>1.3带包的编译和运行(了解)</h3><p>A:手动建包</p>
<p>B:自动建包</p>
<h2 id="2-导包-掌握"><a href="#2-导包-掌握" class="headerlink" title="2.导包(掌握)"></a>2.导包(掌握)</h2><h3 id="2-1用一个类，需要用该类的全路径名称。"><a href="#2-1用一个类，需要用该类的全路径名称。" class="headerlink" title="2.1用一个类，需要用该类的全路径名称。"></a>2.1用一个类，需要用该类的全路径名称。</h3><p>如果多个地方使用，就比较麻烦，所以java提供了导包操作。</p>
<h3 id="2-2格式"><a href="#2-2格式" class="headerlink" title="2.2格式:"></a>2.2格式:</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">import</span> 包名<span class="token number">1</span><span class="token punctuation">.</span>包名<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>类名<span class="token punctuation">;</span>
</code></pre>
<p>下面这种属于把指定包下的类都导入。这种用法不推荐。我们应该用谁导谁。</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">import</span> 包名<span class="token number">1</span><span class="token punctuation">.</span>包名<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span>
</code></pre>
<h3 id="2-3package，import，class的顺序"><a href="#2-3package，import，class的顺序" class="headerlink" title="2.3package，import，class的顺序"></a>2.3package，import，class的顺序</h3><p>package – import – class</p>
<h2 id="3-四种权限修饰符-掌握"><a href="#3-四种权限修饰符-掌握" class="headerlink" title="3.四种权限修饰符(掌握)"></a>3.四种权限修饰符(掌握)</h2><p><img src="http://img.blog.csdn.net/20131219014808765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br><strong>推荐：</strong><br>成员变量private<br>构造方法public<br>成员方法public</p>
<h2 id="4-不同修饰符修饰的内容-和内部类无关"><a href="#4-不同修饰符修饰的内容-和内部类无关" class="headerlink" title="4.不同修饰符修饰的内容(和内部类无关)"></a>4.不同修饰符修饰的内容(和内部类无关)</h2><p><img src="http://img.blog.csdn.net/20131219014256718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br><strong>注意，</strong>常见规则如下：<br>以后，所有的类都用public修饰。并且，在一个java文件中，只写一个类。<br>以后，所有的成员变量用private修饰。<br>以后，所有的成员方法用public修饰。<br><strong>如果是抽象类或者接口：</strong><br>public abstract + …<br>以后，所有的构造方法用public修饰。<br>如果类是工具类或者单例类：<br>构造用private修饰</p>
<h2 id="5-内部类-了解"><a href="#5-内部类-了解" class="headerlink" title="5.内部类(了解)"></a>5.内部类(了解)</h2><h3 id="5-1把类定义在一个类的内部。"><a href="#5-1把类定义在一个类的内部。" class="headerlink" title="5.1把类定义在一个类的内部。"></a>5.1把类定义在一个类的内部。</h3><h3 id="5-2访问特点："><a href="#5-2访问特点：" class="headerlink" title="5.2访问特点："></a>5.2访问特点：</h3><p>A:内部类可以直接访问外部类成员，包括私有<br>B:外部类要想访问内部类成员，必须创建对象。</p>
<h3 id="5-3内部类分类："><a href="#5-3内部类分类：" class="headerlink" title="5.3内部类分类："></a>5.3内部类分类：</h3><p>A:成员位置<br>private <strong>安全</strong><br>static  <strong>方便调用</strong><br>B:局部位置<br>定义在方法中。<br>局部内部类访问局部变量必须加final修饰。<br>延迟生命周期。</p>
<h3 id="5-4匿名内部类-掌握"><a href="#5-4匿名内部类-掌握" class="headerlink" title="5.4匿名内部类(掌握)"></a>5.4匿名内部类(掌握)</h3><p><strong>A:是定义在局部位置的没有名字的内部类。**</strong>B:前提<strong><br>存在一个类，抽象类，或者接口。
</strong>C:格式**</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">new</span> 类或者接口名<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        重写方法<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>本质理解：</strong>其实这是一个继承类或者实现接口的匿名的子类对象。<br><strong>D:使用:</strong><br>当你看到方法的形式参数是接口或者抽象类的时候。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-包-掌握&quot;&gt;&lt;a href=&quot;#1-包-掌握&quot; class=&quot;headerlink&quot; title=&quot;1.包(掌握)&quot;&gt;&lt;/a&gt;1.包(掌握)&lt;/h2&gt;&lt;h3 id=&quot;1-1包其实就是文件夹。&quot;&gt;&lt;a href=&quot;#1-1包其实就是文件夹。&quot; class=&quot;he
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="笔记" scheme="http://gaoll.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JAVA" scheme="http://gaoll.top/tags/JAVA/"/>
    
      <category term="面向对象" scheme="http://gaoll.top/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-Java面向对象3</title>
    <link href="http://gaoll.top/2013/12/15/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A13/"/>
    <id>http://gaoll.top/2013/12/15/Java面向对象3/</id>
    <published>2013-12-14T16:23:00.000Z</published>
    <updated>2017-08-24T08:26:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-多态-掌握"><a href="#1-多态-掌握" class="headerlink" title="1.多态(掌握)"></a>1.多态(掌握)</h2><h3 id="1-1对象在不同时刻表现出来的不同状态。"><a href="#1-1对象在不同时刻表现出来的不同状态。" class="headerlink" title="1.1对象在不同时刻表现出来的不同状态。"></a>1.1对象在不同时刻表现出来的不同状态。</h3><pre><code>
</code></pre><h3 id="1-2多态的前提"><a href="#1-2多态的前提" class="headerlink" title="1.2多态的前提"></a>1.2多态的前提</h3><p><strong>A:</strong>要有继承或者实现关系。<br><strong>B:</strong>要有方法的重写。(否则没有多态的必要)<br><strong>C:</strong>要有父类引用或者父接口引用指向子类对象。<br><strong>注意</strong>：多态有三种体现形式<br>类多态;抽象类多态;接口多态</p>
<h3 id="1-3多态中的成员特点："><a href="#1-3多态中的成员特点：" class="headerlink" title="1.3多态中的成员特点："></a>1.3多态中的成员特点：</h3><p><strong>A:</strong>成员变量</p>
<p>编译看左边，运行看左边。(<strong>变量不存在重写</strong>)</p>
<p><strong>B:</strong>成员方法</p>
<p>编译看左边，运行看右边。</p>
<p><strong>举例</strong>：孔子装爹。(穿老子衣服,说自己的话)</p>
<p><strong>我的理解:(用模具来理解)</strong></p>
<p>父类引用指向子类对象.这个是多态最常见的表现形式,可以这么想.父类,子类,都是一个模具.成员变量,就像是可在模具上的信息,成员方法就像是模具上各种大大小小的凹槽,用来填充料.当生成一个父类引用,就是生成了一个父类的模具;此时如果指向一个子类对象,就是用子类的模具先做一个产品出来,然后再放到父类上塞进去.这个时候,因为子类是继承父类的,父类的凹槽子类中肯定全有,而子类中还可能会多出更多凹槽,所以在子类产品塞上父类的模具的时候,对于那些子,父类都有的凹槽,子类产品是能塞进去的.没有的就只能暂且留在模具外面.而成员变量,就是文字,这样,拿的谁的模具,文字就是谁的.这样就是完整的解释了:父类引用,指向子类对象了.而在这个情况下,想调用子类特有的功能,就需要进行向下转型.想,我们本来就是用子类模具做出来的产品,虽然在塞到父类模具中是,那些子类特有凹槽做出来的部分暂且留在父类模具外面,但是如果这个时候我们再把它塞回子类模具,怎么样,是不是就又全能塞进去了.这就是向下转型,能够使用子类特有方法了.</p>
<p><img src="http://img.blog.csdn.net/20131215002611609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h3 id="1-4多态的弊端："><a href="#1-4多态的弊端：" class="headerlink" title="1.4多态的弊端："></a>1.4多态的弊端：</h3><p>父类(接口)引用不能使用子类特有功能。为了解决这个弊端，我们需要向下转型。Fu f = new Zi(); //向上转型Zi z = (Zi)f; //向下转型Zi z = new Zi();</p>
<h3 id="1-5多态的好处："><a href="#1-5多态的好处：" class="headerlink" title="1.5多态的好处："></a>1.5多态的好处：</h3><p>可以提高代码的扩展性和可维护性。</p>
<h2 id="2-抽象类-理解"><a href="#2-抽象类-理解" class="headerlink" title="2.抽象类(理解)"></a>2.抽象类(理解)</h2><h3 id="2-1定义"><a href="#2-1定义" class="headerlink" title="2.1定义:"></a>2.1定义:</h3><p>如果多个类中存在相同的方法声明，而方法体不一样，我们就可以只提取方法声明。<br>如果一个方法只有方法声明，没有方法体，那么这个方法必须用抽象修饰。<br>而一个类中如果有抽象方法，这个类必须定义为抽象类。</p>
<h3 id="2-2抽象类的特点"><a href="#2-2抽象类的特点" class="headerlink" title="2.2抽象类的特点"></a>2.2抽象类的特点</h3><p>A:抽象类和抽象方法必须使用abstract修饰<br>B:抽象类不能被实例化<br>C:抽象类有抽象方法，用于子类实例化使用<br>D:如果一个类是抽象类，那么，继承它的子类<br>要么是抽象类。<br>要么重写所有抽象方法。</p>
<h3 id="2-3抽象类的成员特点"><a href="#2-3抽象类的成员特点" class="headerlink" title="2.3抽象类的成员特点"></a>2.3抽象类的成员特点</h3><p><strong>A:</strong>成员变量  可以变量，也可以是常量<strong>B:</strong>构造方法  有构造方法<strong>C:</strong>成员方法  可以是抽象方法，也可以是非抽象方法</p>
<h3 id="2-4抽象类的几个小问题"><a href="#2-4抽象类的几个小问题" class="headerlink" title="2.4抽象类的几个小问题"></a>2.4抽象类的几个小问题</h3><p><strong>A:</strong>抽象类不能被实例化，为什么有构造?<br>他的构造用于子类实例化使用。(<strong>Object类都有个空参构造</strong>)<br><strong>B:</strong>一个类没有抽象方法，为什么定义为抽象类?不想被实例化。<br><strong>C:</strong>abstract不能和哪些关键字共存。final:final修饰的方法不能被重写,final修饰的类不能被继承.<br>private:私有方法在子类中无法访问,无法被复写.<br>static:静态的方法在方法加载时就存在,抽象方法静态没有意义.</p>
<h3 id="2-5案例："><a href="#2-5案例：" class="headerlink" title="2.5案例："></a>2.5案例：</h3><pre><code>  老师案例      学生案例
</code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*
具体事务：基本班学员，就业班学员
共性：姓名，年龄，学习，睡觉
*/</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Student</span>
<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//建立学生类,抽象类,有私有属性姓名,年龄.有抽象方法学习,有普通方法睡觉.</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是传智学员,我要睡觉."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该学生叫:"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"\t该学生年龄为:"</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">BaseStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span>
<span class="token punctuation">{</span>
    <span class="token function">BaseStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">BaseStudent</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"基础班学员学习基础知识.JavaSE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">AdvStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span>
<span class="token punctuation">{</span>
    <span class="token function">AdvStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">AdvStudent</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"就业班学员学习高级知识.JavaEE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">StudentTest_abstract</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">/*
        Student b=new BaseStudent("张三",18);
        b.show();
        b.sleep();
        b.study();
        System.out.println("----分--------割---------线---");
        Student a=new AdvStudent("李四",20);
        a.show();
        a.sleep();
        a.study();
        System.out.println("----分--------割---------线---");
        System.out.println("----分--------割---------线---");
        */</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="3-接口-理解"><a href="#3-接口-理解" class="headerlink" title="3.接口(理解)"></a>3.接口(理解)</h2><h3 id="3-1定义"><a href="#3-1定义" class="headerlink" title="3.1定义"></a>3.1定义</h3><p>如果一个抽象类中的方法都是抽象的，这个时候，java就提供了一种更抽象的表示形式：接口。<br><strong>接口</strong>：interface<br><strong>实现</strong>：implements<strong>格式</strong>：interface 接口名{}<br>class 类名 implements 接口名 {}</p>
<h3 id="3-2接口的特点："><a href="#3-2接口的特点：" class="headerlink" title="3.2接口的特点："></a>3.2接口的特点：</h3><p><strong>A:</strong>接口不能被实例化。<strong>B:</strong>一个类如果实现了接口：      要么是抽象类。<br>      要么实现接口中的所有方法。</p>
<h3 id="3-3接口的成员特点："><a href="#3-3接口的成员特点：" class="headerlink" title="3.3接口的成员特点："></a>3.3接口的成员特点：</h3><p>A:<strong>成员变量</strong>  只能是常量。默认修饰符 public static final<br>B:<strong>成员方法</strong>  只能是抽象方法。默认修饰符 public abstract<br><strong>推荐</strong>：永远手动给出修饰符。</p>
<h3 id="3-4接口的思想特点："><a href="#3-4接口的思想特点：" class="headerlink" title="3.4接口的思想特点："></a>3.4接口的思想特点：</h3><p><strong>A:</strong>对外暴露的规则老师的原话,但是我对这个思想的理解有些模糊,后来想了想,对外暴露的规则,可以这么理解,接口就是描述一项功能,或者行为,当一个类需要这个功能,就通过实现这个接口.当然,功能的实体是需要这个类重新定义的.接口就像是让你了解需要这个功能,你得遵守那些规则.接口就是这个对外暴露的让你知道的规则,他没必要具有这个功能的主体.<br><strong>B:</strong>是功能的扩展<strong>C:</strong>降低耦合度(<strong>关联度</strong>)     <strong>耦合</strong>：类与类的关系<br>     <strong>内聚</strong>：类自己完成某件事情的能力(<strong>独立度</strong>)<br>高内聚，低耦合。<br><strong>D:</strong>接口可以多实现。(想想啊,反正接口都是抽象方法,不存在类中的同名方法指向不明确的问题.)</p>
<h3 id="3-5类，接口的关系"><a href="#3-5类，接口的关系" class="headerlink" title="3.5类，接口的关系"></a>3.5类，接口的关系</h3><p><strong>A:类与类</strong>继承关系,只能单继承，可以多层继承。<br><strong>B:类与接口</strong>实现关系，可以单实现，也可以多实现。<br>还可以在继承一个类的同时实现多个接口。<br><strong>C:接口与接口</strong>继承关系，可以单继承，也可以多继承。</p>
<h3 id="3-6抽象类和接口的关系"><a href="#3-6抽象类和接口的关系" class="headerlink" title="3.6抽象类和接口的关系"></a>3.6抽象类和接口的关系</h3><h3 id="3-7案例：运动员和教练的案例。"><a href="#3-7案例：运动员和教练的案例。" class="headerlink" title="3.7案例：运动员和教练的案例。"></a>3.7案例：运动员和教练的案例。</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*
乒乓球,篮球运动员,教练.
乒乓球球员教练都需要会英语,出国交流.
思路分析:
1.运动员,教练都是人,都有姓名,年龄--->抽象类,人.
2.篮球运动员,乒乓球运动员都是运动员--->父类,运动员.
3.篮球教练,乒乓球教练都是教练--->父类,教练.
4.出国交流会英语--->接口,会英语.
*/</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token comment" spellcheck="true">//运动员,教练都是人,都有姓名,年龄--->抽象类,人.</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">SpeakEnglish</span><span class="token comment" spellcheck="true">//出国交流会英语--->接口,会英语.</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SportsMan</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token comment" spellcheck="true">//篮球运动员,乒乓球运动员都是运动员--->父类,运动员.</span>
<span class="token punctuation">{</span>
    <span class="token function">SportsMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">SportsMan</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doSports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Coach</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token comment" spellcheck="true">//篮球教练,乒乓球教练都是教练--->父类,教练.</span>
<span class="token punctuation">{</span>
    <span class="token function">Coach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">Coach</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">BasketballSportsman</span> <span class="token keyword">extends</span> <span class="token class-name">SportsMan</span>
<span class="token punctuation">{</span>
    <span class="token function">BasketballSportsman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">BasketballSportsman</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">doSports</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"篮球运动员,练习打练球."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PingpangSportsman</span> <span class="token keyword">extends</span> <span class="token class-name">SportsMan</span> <span class="token keyword">implements</span> <span class="token class-name">SpeakEnglish</span>
<span class="token punctuation">{</span>
    <span class="token function">PingpangSportsman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">PingpangSportsman</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">doSports</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乒乓球运动员,练习打乒乓球."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乒乓球运动员精通英语."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">BasketballCoach</span> <span class="token keyword">extends</span> <span class="token class-name">Coach</span>
<span class="token punctuation">{</span>
    <span class="token function">BasketballCoach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">BasketballCoach</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"能够训练篮球运动员打篮球."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PingpangCoach</span> <span class="token keyword">extends</span> <span class="token class-name">Coach</span> <span class="token keyword">implements</span> <span class="token class-name">SpeakEnglish</span>
<span class="token punctuation">{</span>
    <span class="token function">PingpangCoach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">PingpangCoach</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"能够训练乒乓球运动员打篮球."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乒乓球教练精通英语."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">SportsmanTest</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        BasketballSportsman a1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BasketballSportsman</span><span class="token punctuation">(</span><span class="token string">"姚明"</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a1<span class="token punctuation">.</span><span class="token function">doSports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------分割线-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BasketballCoach a2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BasketballCoach</span><span class="token punctuation">(</span><span class="token string">"姚明他老子"</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a2<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------分割线-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PingpangSportsman a3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PingpangSportsman</span><span class="token punctuation">(</span><span class="token string">"邓亚萍"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a3<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a3<span class="token punctuation">.</span><span class="token function">doSports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a3<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------分割线-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PingpangCoach a4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PingpangCoach</span><span class="token punctuation">(</span><span class="token string">"邓亚萍他老子"</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a4<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a4<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a4<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-多态-掌握&quot;&gt;&lt;a href=&quot;#1-多态-掌握&quot; class=&quot;headerlink&quot; title=&quot;1.多态(掌握)&quot;&gt;&lt;/a&gt;1.多态(掌握)&lt;/h2&gt;&lt;h3 id=&quot;1-1对象在不同时刻表现出来的不同状态。&quot;&gt;&lt;a href=&quot;#1-1对象在不同时刻表
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="笔记" scheme="http://gaoll.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JAVA" scheme="http://gaoll.top/tags/JAVA/"/>
    
      <category term="思路" scheme="http://gaoll.top/tags/%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-Java面向对象2</title>
    <link href="http://gaoll.top/2013/12/13/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A12/"/>
    <id>http://gaoll.top/2013/12/13/Java面向对象2/</id>
    <published>2013-12-12T17:46:00.000Z</published>
    <updated>2017-08-24T08:26:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-如何使用API-掌握"><a href="#1-如何使用API-掌握" class="headerlink" title="1.   如何使用API(掌握)"></a>1.   如何使用API(掌握)</h2><p><strong>A</strong>:找到文档，打开文档。</p>
<p><strong>B</strong>:点击左上角的显示变成隐藏，然后点击索引</p>
<p><strong>C:</strong>你应该知道你要找谁?比如要找Math类.所以，你就在那个输入框里面输入Math，然后回车，再回车。</p>
<p><strong>D</strong>:看这个类的结构</p>
<p>java.lang 类 Math</p>
<p>java.util 类 Scanner</p>
<p>如果是java.lang包下的类，是可以直接使用的。(Math)</p>
<p>否则，就需要导包才能使用。(Scanner)</p>
<p><strong>E</strong>:看看对这个类的说明。</p>
<p><strong>F</strong>:看构造方法</p>
<p>名称：字段   –成员变量   – 属性。</p>
<p><strong>a</strong>:有构造方法，那么，就通过构造方法创建对象使用。</p>
<p><strong>b:</strong>没有构造方法，那么，这个类的成员一般都是静态。通过类名调用。</p>
<p><strong>G</strong>:按照正常的操作使用方法。</p>
<p><strong>左边：(返回值,及返回值类型,是否静态)</strong></p>
<p><strong>是否静态</strong>：如果静态修饰，那么可以通过类名调用。否则，就必须创建对象调用。</p>
<p><strong>是否有明确返回值</strong>：如果是void类型，就直接调用即可。否则，就可以输出或者赋值。</p>
<p><strong>右边：(方法名,参数类表)</strong></p>
<p><strong>看方法名</strong>：不要写错了。</p>
<p><strong>看参数</strong>：看参数类型及个数。</p>
<h2 id="2-继承-掌握"><a href="#2-继承-掌握" class="headerlink" title="2.   继承(掌握)"></a>2.   继承(掌握)</h2><h3 id="2-1何为继承"><a href="#2-1何为继承" class="headerlink" title="2.1何为继承"></a>2.1何为继承</h3><p>把多个类中的相同属性和行为进行抽取,封装到一个类中.然后再建立新的类时,不需要重头开始起定义,继承刚才定义的那个类即可.</p>
<h3 id="2-2继承的优点"><a href="#2-2继承的优点" class="headerlink" title="2.2继承的优点"></a>2.2继承的优点</h3><p>提高了代码的复用性.同时,使得类与共性属性行为的偶联性降低了.</p>
<p>让类与类之间产生一个关系,是多态的前提.</p>
<h3 id="2-3使用继承的时间"><a href="#2-3使用继承的时间" class="headerlink" title="2.3使用继承的时间"></a>2.3使用继承的时间</h3><p><strong>A:</strong>当两个类之间存在了is a 的关系,就可以考虑使用继承.就是a类是b类的一种.</p>
<p><strong>B.</strong>不要为了获取一个功能而去使用继承,要根据程序的自然属性等判断.</p>
<h3 id="2-4继承的特点"><a href="#2-4继承的特点" class="headerlink" title="2.4继承的特点"></a>2.4继承的特点</h3><p>Java只支持但继承,不支持多继承.否则,当多个父类中定义了同名方法,子类调用时出现调用不明确问题.</p>
<p>Java支持多重(多层)继承.</p>
<h3 id="2-5关键字super和this"><a href="#2-5关键字super和this" class="headerlink" title="2.5关键字super和this"></a>2.5关键字super和this</h3><p>super是一个关键字,用来代表父亲的存储空间标识.(可以暂时理解为父类的引用.)</p>
<p><strong>super的使用方法</strong>和this基本一致.</p>
<p>成员变量:this.变量-本类;super.变量-父类;</p>
<p>构造方法:this(…)本类;super(…)父类</p>
<p>成员方法:this.方法名()本类;super(…)父类</p>
<h3 id="2-6子父类中的成员变量的用法"><a href="#2-6子父类中的成员变量的用法" class="headerlink" title="2.6子父类中的成员变量的用法"></a>2.6子父类中的成员变量的用法</h3><p>名称不同,直接找对的调用.</p>
<p>名称相同,子类对象在使用时:</p>
<p>先找子类局部范围,再找子类成员范围,最后找父类成员范围.</p>
<h3 id="2-7子父类中的成员方法使用"><a href="#2-7子父类中的成员方法使用" class="headerlink" title="2.7子父类中的成员方法使用"></a>2.7子父类中的成员方法使用</h3><p>名称不同,直接调用名称正确的.</p>
<p>名称相同,子类对象在使用时,先找子类的方法,再找父类的方法.</p>
<p><strong>方法重写</strong>:在子类中,如果存在和父类方法声明完全相同的方法,则是子类对父类该方法的重写.(方法声明包括:修饰符,返回值,函数名,参数列表)</p>
<p><strong>注意事项</strong>:    父类中的私有方法,final方法不能被重写.</p>
<pre><code>        子类方法的访问权限必须大于父类该方法的反问权限.

        静态方法只能重写静态方法(基本不出现,静态在详解)
</code></pre><p><img src="http://img.blog.csdn.net/20131213014321906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h3 id="2-8子父类中构造方法的使用"><a href="#2-8子父类中构造方法的使用" class="headerlink" title="2.8子父类中构造方法的使用"></a>2.8子父类中构造方法的使用</h3><p>子类的初始化过程,首先会去执行父类的初始化动作.</p>
<p>因为,默认给子类构造方法中加入了一条super().因为,子类继承父类,子类在初始化时,相当有可能会使用到父类的成员变量,这个时候就必须先将父类进行初始化.</p>
<p><strong>如果父类没有无参构造方法</strong>(解决方法)</p>
<pre><code>  手动使用super调用父类存在的带参构造,来实现初始化.(推荐)

  使用this调用本身的其他构造函数.    
</code></pre><p><strong>案例代码</strong>:</p>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*
 分析如下需求，写出你分析的类有哪些，以及功能。
 最后写一个测试类，针对每个类的功能进行测试。

 动物园里有很多种动物：
 比如说，狗，猫等。
 狗有姓名和年龄，猫也有姓名和年龄。
 狗有跑步的方法，猫也有跑步的方法。而且都仅仅是跑步。
 狗有吃饭的方法，猫也有吃饭的方法。只不过，狗吃骨头，猫吃鱼。
 请用所学知识，对这个问题进行解决。
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"^^^^^^^^^^^^^^^^"</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"岁了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看他跑起来了~！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token function">Cat</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"他是猫，他在吃鱼。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
    <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"他是狗，他在吃骨头。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Day08_HomeWork</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        Cat c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"小花"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        c<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        c<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Dog d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        d<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="3-代码块"><a href="#3-代码块" class="headerlink" title="3.   代码块"></a>3.   代码块</h2><p><strong>执行顺序:</strong></p>
<p>  静态代码块à构造代码块à构造方法</p>
<p>(静态代码块只执行一次)</p>
<h2 id="4-final关键字"><a href="#4-final关键字" class="headerlink" title="4.   final关键字"></a>4.   final关键字</h2><p>是一个关键字,可以用于修饰类,成员变量,成员方法.</p>
<p><strong>特点</strong>:</p>
<p>  它修饰的类不能被继承.</p>
<p>  它修饰的成员变量就是一个常量.</p>
<p>  它修饰的成员方法不能被其子类重写(覆盖).</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-如何使用API-掌握&quot;&gt;&lt;a href=&quot;#1-如何使用API-掌握&quot; class=&quot;headerlink&quot; title=&quot;1.   如何使用API(掌握)&quot;&gt;&lt;/a&gt;1.   如何使用API(掌握)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;:找到文
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="基础视频" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80%E8%A7%86%E9%A2%91/"/>
    
      <category term="知识点" scheme="http://gaoll.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="笔记" scheme="http://gaoll.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JAVA" scheme="http://gaoll.top/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员-Java面向对象1</title>
    <link href="http://gaoll.top/2013/12/11/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A11/"/>
    <id>http://gaoll.top/2013/12/11/Java面向对象1/</id>
    <published>2013-12-10T17:12:00.000Z</published>
    <updated>2017-08-24T08:25:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Java中的参数传递问题。-理解内存图"><a href="#1-Java中的参数传递问题。-理解内存图" class="headerlink" title="1.    Java中的参数传递问题。(理解内存图)"></a>1.    Java中的参数传递问题。(理解内存图)</h2><p><strong>基本类型</strong>：形式参数的改变对实际参数没有影响。</p>
<p><strong>引用类型</strong>：形式参数的改变直接影响实际参数。</p>
<p><img src="http://img.blog.csdn.net/20131211011653703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<a id="more"></a>
<h2 id="2-面向对象-理解"><a href="#2-面向对象-理解" class="headerlink" title="2.    面向对象(理解)"></a>2.    面向对象(理解)</h2><h3 id="2-1面向对象："><a href="#2-1面向对象：" class="headerlink" title="2.1面向对象："></a>2.1面向对象：</h3><p>是基于面向过程的一种思想。</p>
<p><strong>面向过程</strong>：以函数为基础，关注实现过程。</p>
<p><strong>面向对象</strong>：以对象为基础，关注实现结果。</p>
<h3 id="2-2面向对象的思想特点："><a href="#2-2面向对象的思想特点：" class="headerlink" title="2.2面向对象的思想特点："></a>2.2面向对象的思想特点：</h3><p><strong>A:</strong>是一种更符合人们思考习惯的思想。</p>
<p><strong>B:</strong>把复杂的事情简单化了。</p>
<p><strong>C:</strong>把我们从执行者变成了指挥者。</p>
<p><strong>举例：</strong>买电脑。洗衣，做饭。旅游。把大象装进冰箱。(代码体现了，去看看)</p>
<h3 id="2-3事物是如何体现的"><a href="#2-3事物是如何体现的" class="headerlink" title="2.3事物是如何体现的?"></a>2.3事物是如何体现的?</h3><p><strong>A:属性 </strong> 有哪些特征</p>
<p><strong>B:行为 </strong> 有哪些功能</p>
<h3 id="2-4类与对象的关系：-掌握"><a href="#2-4类与对象的关系：-掌握" class="headerlink" title="2.4类与对象的关系：(掌握)"></a>2.4类与对象的关系：(掌握)</h3><p>把事物转换成类：</p>
<p><strong>A</strong>:成员变量:定义在类中，方法外。</p>
<p><strong>B</strong>:成员方法:和以前的区别是去掉static。</p>
<p><strong>类</strong>：是相关的属性和行为的集合。是一个抽象的概念。</p>
<p><strong>对象</strong>：是某种事物的具体存在，具体的表现形式。</p>
<p><strong>举例</strong>：  类：学生     对象：张三</p>
<h3 id="2-5案例："><a href="#2-5案例：" class="headerlink" title="2.5案例："></a>2.5案例：</h3><p> A:学生类     B:手机类     C:汽车类(内存图)</p>
<h3 id="2-5如何使用呢"><a href="#2-5如何使用呢" class="headerlink" title="2.5如何使用呢?"></a>2.5如何使用呢?</h3><p><strong>A</strong>:创建对象  格式：</p>
<p>类名 对象名 = new 类名();</p>
<p><strong>B:</strong>使用成员变量和成员方法</p>
<p>对象名.成员变量</p>
<p>对象名.成员方法</p>
<h2 id="3-成员变量和局部变量的区别（理解）"><a href="#3-成员变量和局部变量的区别（理解）" class="headerlink" title="3.   成员变量和局部变量的区别（理解）"></a>3.   成员变量和局部变量的区别（理解）</h2><h3 id="3-1定义位置的区别"><a href="#3-1定义位置的区别" class="headerlink" title="3.1定义位置的区别"></a>3.1定义位置的区别</h3><p><strong>成员变量</strong>：类中，方法外</p>
<p><strong>局部变量</strong>：方法中，方法声明中</p>
<h3 id="3-2初始化值的区别"><a href="#3-2初始化值的区别" class="headerlink" title="3.2初始化值的区别"></a>3.2初始化值的区别</h3><p><strong>成员变量</strong>：都有默认值</p>
<p><strong>局部变量</strong>：没有初始化值，必须先赋值才能使用。</p>
<h3 id="3-3存储位置的区别"><a href="#3-3存储位置的区别" class="headerlink" title="3.3存储位置的区别"></a>3.3存储位置的区别</h3><p><strong>成员变量</strong>：堆内存中</p>
<p><strong>局部变量</strong>：栈内存中</p>
<h3 id="3-4生命周期的区别"><a href="#3-4生命周期的区别" class="headerlink" title="3.4生命周期的区别"></a>3.4生命周期的区别</h3><p><strong>成员变量</strong>：随着对象的存在消失</p>
<p><strong>局部变量</strong>：随着函数方法调用的开始与结束</p>
<h2 id="4-封装（理解）"><a href="#4-封装（理解）" class="headerlink" title="4.   封装（理解）"></a>4.   封装（理解）</h2><h3 id="4-1隐藏实现细节，提供公共的访问方式。"><a href="#4-1隐藏实现细节，提供公共的访问方式。" class="headerlink" title="4.1隐藏实现细节，提供公共的访问方式。"></a>4.1隐藏实现细节，提供公共的访问方式。</h3><p>类，方法等其实都是封装的具体体现。</p>
<h3 id="4-2private关键字"><a href="#4-2private关键字" class="headerlink" title="4.2private关键字"></a>4.2private关键字</h3><p><strong>4.2.1</strong>用于修饰成员变量，成员方法。</p>
<p><strong>4.2.2</strong>被修饰的内容在其他类中无法访问的。</p>
<h3 id="4-3常见应用"><a href="#4-3常见应用" class="headerlink" title="4.3常见应用"></a>4.3常见应用</h3><p>类中所有的成员变量私有，只给出对应的set，get方法。</p>
<p><strong>代码体现</strong>：</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">Day07_Student</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">char</span> sex<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token function">Day07_Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">Day07_Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token keyword">char</span> sex<span class="token punctuation">,</span>String name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token keyword">char</span> sex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">char</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名为："</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"\t年龄为："</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"\t性别为："</span><span class="token operator">+</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Day07_StudentTest</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Day07_Student s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Day07_Student</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span>"高富帅\"<span class="token punctuation">)</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n=========啦啦啦啦我是可爱的分隔符=====================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Day07_Student s2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Day07_Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s2<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"白富美"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名为："</span><span class="token operator">+</span>s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"年龄为："</span><span class="token operator">+</span>s2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"性别为："</span><span class="token operator">+</span>s2<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n=========啦啦啦啦我是可爱的分隔符=====================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="5-构造方法（掌握）"><a href="#5-构造方法（掌握）" class="headerlink" title="5.   构造方法（掌握）"></a>5.   构造方法（掌握）</h2><h3 id="5-1格式及特点"><a href="#5-1格式及特点" class="headerlink" title="5.1格式及特点"></a>5.1格式及特点</h3><p><strong>格式：</strong></p>
<p>访问权限修饰符 类名（参数）{}</p>
<p>反问权限修饰符：public ，private</p>
<p><strong>特点：</strong></p>
<p>方法名类名相同</p>
<p>没有返回值类型</p>
<p>没有具体的返回值</p>
<h3 id="5-2注意事项"><a href="#5-2注意事项" class="headerlink" title="5.2注意事项"></a>5.2注意事项</h3><p><strong>5.2.1</strong>如果不给构造方法，jvm默认给一个无参构造方法。</p>
<p><strong>5.2.2</strong>如果给出构造方法，那么jvm将不再提供无参构造方法。</p>
<p>这个时候，如果要使用无参构造方法，必须自己提供。（推荐永远手动给出无参构造方法）</p>
<h2 id="6-this关键字（掌握）"><a href="#6-this关键字（掌握）" class="headerlink" title="6.   this关键字（掌握）"></a>6.   this关键字（掌握）</h2><h3 id="6-1是一个关键字，代表当前类的引用。"><a href="#6-1是一个关键字，代表当前类的引用。" class="headerlink" title="6.1是一个关键字，代表当前类的引用。"></a>6.1是一个关键字，代表当前类的引用。</h3><p><strong>简单</strong>：在方法中，那个对象调用方法，this就代表谁。</p>
<h3 id="6-2应用场景"><a href="#6-2应用场景" class="headerlink" title="6.2应用场景"></a>6.2应用场景</h3><p>解决局部变量隐藏成员变量</p>
<h2 id="7-static关键字（理解）"><a href="#7-static关键字（理解）" class="headerlink" title="7.   static关键字（理解）"></a>7.   static关键字（理解）</h2><h3 id="7-1是一个关键字。"><a href="#7-1是一个关键字。" class="headerlink" title="7.1是一个关键字。"></a>7.1是一个关键字。</h3><p>可以修饰成员变量的成员方法。</p>
<h3 id="7-2静态的特点："><a href="#7-2静态的特点：" class="headerlink" title="7.2静态的特点："></a>7.2静态的特点：</h3><p>随着类的加载而加载</p>
<p>优先于对象存在</p>
<p>被类的所有对象所共享</p>
<p>可以通过类名直接调用</p>
<h3 id="7-3静态的注意事项"><a href="#7-3静态的注意事项" class="headerlink" title="7.3静态的注意事项"></a>7.3静态的注意事项</h3><p>在静态方法中是没有this关键字的</p>
<p>静态方法只能访问静态的成员变量和静态的成员方法</p>
<h3 id="7-4静态的调用方法"><a href="#7-4静态的调用方法" class="headerlink" title="7.4静态的调用方法"></a>7.4静态的调用方法</h3><p>被对象调用       被类名直接调用</p>
<h2 id="8-Math类的随机数（理解）"><a href="#8-Math类的随机数（理解）" class="headerlink" title="8.   Math类的随机数（理解）"></a>8.   Math类的随机数（理解）</h2><p>类名调用静态方法。</p>
<p><strong>包</strong>：java.lang</p>
<p><strong>类</strong>：Math</p>
<p><strong>方法</strong>：public static double random()</p>
<p>取1-100之间的一个随机整数</p>
<p>int x=Math.random()/*100+1;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Java中的参数传递问题。-理解内存图&quot;&gt;&lt;a href=&quot;#1-Java中的参数传递问题。-理解内存图&quot; class=&quot;headerlink&quot; title=&quot;1.    Java中的参数传递问题。(理解内存图)&quot;&gt;&lt;/a&gt;1.    Java中的参数传递问题。(理解内存图)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;基本类型&lt;/strong&gt;：形式参数的改变对实际参数没有影响。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;引用类型&lt;/strong&gt;：形式参数的改变直接影响实际参数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20131211011653703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm90dG9ubXlzZWxm/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://gaoll.top/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="黑马程序员" scheme="http://gaoll.top/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="笔记" scheme="http://gaoll.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="基础" scheme="http://gaoll.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="教程" scheme="http://gaoll.top/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="java" scheme="http://gaoll.top/tags/java/"/>
    
  </entry>
  
</feed>
